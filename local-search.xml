<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue</title>
    <link href="/2023/07/07/vue/"/>
    <url>/2023/07/07/vue/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p>这里只是快速入门，并不是非常详细的学习路径</p><p>只是粗糙的刷一遍官网</p><p>vue可以不做数据查找，他进行了双向绑定MVVM</p><p>model-view</p><h1 id="Vue初体验"><a href="#Vue初体验" class="headerlink" title="Vue初体验"></a>Vue初体验</h1><p>vue.js的核心是允许采用简洁的模板语法来声明式地将数据渲染进DOM的系统中</p><p>使用Vue之后我们不再和 HTML直接交互了，一个 Vue 应用会将其挂载到一个 DOM 元素上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;星光浮梦&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> &#123; createApp &#125; = <span class="hljs-title class_">Vue</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">createApp</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue!&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这一段是vue3的代码，但是松哥教的是vue2，使用起来的差距还是存在的</p><p>vue2的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>  &#123;&#123;message&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">message</span>:<span class="hljs-string">&#x27;hello vue!&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;xgfm&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>v-bind特性被称为指令，指令的前缀带有v-，以 表示它们是vue提供的特殊特性</p><h1 id="条件指令"><a href="#条件指令" class="headerlink" title="条件指令"></a>条件指令</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span><br>        hello xgfm!<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">flag</span>:<span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过flag的值来使得hello xgfm是否现实出来</p><p>还有一种可以隐藏的是v-show</p><p>两者的差距在于v-if是直接将该标签从代码中隐藏起来，而v-show则是通过css样式的display设置隐藏</p><p>如果需要频繁的隐藏v-show会更加合适</p><h1 id="循环指令"><a href="#循环指令" class="headerlink" title="循环指令"></a>循环指令</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;i in num&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;g in i&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;*&#123;&#123;i&#125;&#125;=&#123;&#123;g*i&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">num</span>:<span class="hljs-number">9</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h1><h6 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;reverseMessage&quot;</span>&gt;</span>反转消息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;hello xgfm&quot;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">reverseMessage</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>=<span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也就是创建方法然后在方法中对message进行处理，分析一下this.message&#x3D;this.message.split(“”).reverse().join(“”)</p><p>先用split拆分成数组再逆转，最后用join拼接成字符串。</p><h6 id="输入事件"><a href="#输入事件" class="headerlink" title="输入事件"></a>输入事件</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;hello xgfm&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用v-model将message和div中显示的值绑定在一起</p><h1 id="Vue组件初体验"><a href="#Vue组件初体验" class="headerlink" title="Vue组件初体验"></a>Vue组件初体验</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xgfm</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xgfm</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;xgfm&#x27;</span>,&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;h1&gt;hello xgfm&lt;/h1&gt;&#x27;</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;hello xgfm&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xgfm</span> <span class="hljs-attr">v-bind:name</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xgfm</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;xgfm&#x27;</span>,&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;name&#x27;</span>],</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;h1&gt;hello &#123;&#123;name&#125;&#125;&lt;/h1&gt;&#x27;</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;hello xgfm&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">hello</span>: <span class="hljs-string">&#x27;xgfm!!&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br></code></pre></td></tr></table></figure><p>目前的理解就是将标签的展示和数据分离出来，可以重复使用</p><p>一个组件本质上是一个拥有预定义选项的一个 Vue 实例</p><h1 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h1>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习</title>
    <link href="/2023/06/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/06/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习基本概念"><a href="#机器学习基本概念" class="headerlink" title="机器学习基本概念"></a>机器学习基本概念</h1><h6 id="基础定义"><a href="#基础定义" class="headerlink" title="基础定义"></a>基础定义</h6><ol><li><p>定义带有未知数的函数</p></li><li><p>定义loss函数，输入b,w。该函数的输出值为所拥有的训练集</p><p>这些函数是机器自己找出来的，需要自己设定hyperparameters（超参数），期间需要反复移动W。有俩种情况下，会停止一定w</p><ul><li>达到了调整次数设定的上限</li><li>微分算出来的值刚刚为0</li></ul></li><li><p>local minima和global minima。在进行gradient descent（梯度下降法）时候会存在一定的local minima的问题<img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230701210755380.png" alt="image-20230701210755380"></p><p><mark>都需要分别减去learning rate，反复进行更新，找到最优的w和b</mark></p></li></ol><p>以上三个步骤组合起来称为训练。现在是在答案已知的资料上去计算Loss，但真正的重点是预测未来未知的观看次数。</p><p>像这种Feature*weight+Bias就得到预测结果的Model统称为Linear model（线性模型）</p><p>但是现实生活的情况不可能只是一条直直的线，但是无论如何调整Model中的参数，都无法用Linear的Model制造复杂折线。这属于来自Model的限制，称为Model的Bias，也就是指模型无法模拟真实情况。</p><p>因此我们需要对Model进行改进，需要一个更加复杂、灵活的，并带有未知参数的Function。</p><p>复杂的曲线，更像是一个常数，再加上一堆不同的函数，称为Piecewise Linear 的 Curves。曲线的转折越多越复杂，所需要的函数就越多</p><p>所以只要有<strong>不同的 w 不同的 b 不同的 c,你就可以制造出不同的 Sigmoid Function。</strong>把<strong>不同的 Sigmoid Function 叠加起来以后，就可以去逼近各种不同的Piecewise Linear 的 Function,然后 Piecewise Linear 的 Function,可以拿来近似各种不同的 Continuous 的 Function</strong>。</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230701213123620.png" alt="image-20230701213123620"></p><p>这样能使的写出更加有弹性的函数</p><h6 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h6><p>x是Feature，W是权重组成的矩阵，绿色框的b为向量，灰色框的b为数值，c为常数组成的向量。那么W c 向量b 常数b就是Unknown Parameters，也就是未知的参数</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230702005122170.png" alt="image-20230702005122170"></p><p>第二步就是要为这个新的Function定义一个新的Loss。</p><p>与之前Linear Model的Loss的定义的方法相同，由于这次参数变多了，就直接用θ来统设所有的参数，则Loss Function就可表示成L（θ）</p><p>最后一步进行优化，首先给定一组θ的值，然后把Feature带入，查看y和真实的label之间的差距，把所有的误差相加，就可以得到loss了。我们需要找到一组θ，使得loss越小越好</p><p>先由θ0计算Gradient（梯度），根据得到的梯度将θ0更新为θ1；之后再根据θ1计算新的Gradient，再把θ1更新为θ2……以此类推，直到计算次数达到了预先指定的上限；或者计算出来的梯度为0向量，让你无法再更新参数为止</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230702005528584.png" alt="image-20230702005528584"></p><p>在实际操作中，如果手中有N个数据，一般会将N个数据分成一个个的Batch，计算LOSS时只拿一个batch中的Data计算Loss，设为L1，根据这个 L1 来算 Gradient，用这个 Gradient 来更新参数。再选用下一个batch算出L2，再算出对应的Gradient，再用这个Gradient更新参数….</p><p><strong>所以我们并不是拿L来算Gradient。实际上我们是拿一个 Batch算出来的L1 L2 L3来计算 Gradient,那把所有的 Batch 都看过一次,叫做一个Epoch,每一次更新参数叫做一次 Update</strong>。</p><p>一个Hard Sigmoid可以看作Hard Sigmoid，可以看作<strong>两个Rectified Linear Unit（ReLU 修正线性单元）的结合</strong>，使用不同数量的ReLU得出的结果有一定的差别，重复的次数又是一个Hyper Parameter，重复的次数也是由人所决定的</p><h6 id="总结（定义）"><a href="#总结（定义）" class="headerlink" title="总结（定义）"></a>总结（定义）</h6><p>Model中的Sigmoid或ReLU称为<strong>Neuron（神经元）</strong> ，多个神经元连起来就是<strong>Neural Network（神经网络）</strong></p><p>图中每一层的神经元称为<strong>hidden layer（隐藏层）</strong>；多个Hidden Layer就组成了Deep；以上的整套技术就称为<strong>Deep Learning（深度学习）</strong></p><p>深度学习的层数也不能太多，太多会导致<strong>Overfitting（过拟合）</strong>，也就是在训练集上表现的好，但是在测试集上表现差。</p><h1 id="Colab（工具）"><a href="#Colab（工具）" class="headerlink" title="Colab（工具）"></a>Colab（工具）</h1><p>Colab &#x3D; Colaboratory（即合作实验室），是谷歌提供的一个在线工作平台，用户可以直接通过浏览器执行python代码并与他人分享合作。Colab的主要功能当然不止于此，它还为我们提供免费的GPU。熟悉深度学习的同学们都知道：CPU计算力高但核数量少，善于处理线性序列，而GPU计算力低但核数量多，善于处理并行计算。在深度学习中使用GPU进行计算的速度要远快于CPU，因此有高算力的GPU是深度学习的重要保证。由于不是所有GPU都支持深度计算（大部分的Macbook自带的显卡都不支持），同时显卡配置的高低也决定了计算力的大小，因此Colab最大的优势在于我们可以“借用”谷歌免费提供的GPU来进行深度学习。</p><h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><p>可以使用自己的GPU进行加速，很多都是基于Pytorch环境做的实验。</p><p>PyTorch是一个基于Torch的Python开源机器学习库，用于自然语言处理等应用程序。它主要由Facebookd的人工智能小组开发，不仅能够 实现强大的GPU加速，同时还支持动态神经网络。</p><h1 id="Pytorch的安装"><a href="#Pytorch的安装" class="headerlink" title="Pytorch的安装"></a>Pytorch的安装</h1><ol><li><p>cmd输入nvidia-smi，查看CUDA版本号</p></li><li><p>到pytorch官网找到对应版本的命令行语句</p></li><li><p>使用anaconda配置虚拟环境为py37</p></li><li><p>执行pytorch官网找到对应版本的命令行语句</p></li><li><p>检查安装的包中有pytorch和cudatoolkit，并且确保pytorch不是CPU版本</p></li><li><p>检查是否完成安装</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import torch<br><span class="hljs-comment">//如果没有报错则导入成功</span><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(torch.cuda.is_available()</span></span>)<br><span class="hljs-comment">//输出true则为CUDA版本</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>用θ来代表这个Model裡面所有的未知函数，也就是说这个Model代表的意思是：现在有一个function叫f(x),它里面面有一些未知的参数，这些未知的参数表示成θ，它的input叫做x，同时这个input叫做feature（特征)</p><p><strong>Model Bias（模型偏差）</strong></p><p><strong>Optimization Issue（优化问题）</strong></p><p>所谓的model bias意思是说，你的model太过简单。model不具备足够的弹性。在function set（函数集）中没有一个Function可以让Loss变低。在这种情况下就需要重新设计一个model</p><p>所谓的Optimization Issue，我们一般用的optimization的方法一般gradient descent，这种方法有很多的问题。</p><p>举例来说 你可能会卡在local minima的地方，你没有办法找到一个真的可以让loss很低的参数。</p><p>gradient descent是解一个optimization的问题，找到θ* 然后就结束了。但是它给我的loss不够低。这一个model裡面，存在着某一个function，它的loss是够低的，gradient descent没有找到这一个function。</p><p>训练集的loss小，测试集的loss大，则可能是遇到了overfitting的问题了。</p><p>最简单的解决overfitting的方法就是增加训练资料。</p><p>也可以使用Data agurement。</p><p>所谓的Data augmentation就是你用一些你对于这个问题的理解，自己创造出新的资料</p><h1 id="全周期深度学习应用程序"><a href="#全周期深度学习应用程序" class="headerlink" title="全周期深度学习应用程序"></a>全周期深度学习应用程序</h1><ol><li>选择问题</li><li>应用监督学习，获取标记数据</li><li>设计模型</li><li>训练模型</li><li>测试</li><li>部署</li><li>维护</li></ol><h1 id="Batch"><a href="#Batch" class="headerlink" title="Batch"></a>Batch</h1><p>batch size&#x3D;n，更新参数需要看完n笔资料。</p><p>不使用batch的方式是看完所有的batch再进行一次更新，使用batch则是每次输入一笔资料就进行一次更新。</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230705013714220.png" alt="image-20230705013714220"></p><p>在考虑平行运算的情况下一个epoch大的batch花的时间反而比较少。</p><p>当时large batch时优化可能会较差，small batch(noisy update)对于训练的效果更好一些</p><p>small batch 和 large batch差距如图</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230705014246430.png" alt="image-20230705014246430"></p><p>需要调整对应的超参数。</p><h1 id="Momentum-动量梯度下降法"><a href="#Momentum-动量梯度下降法" class="headerlink" title="Momentum(动量梯度下降法)"></a>Momentum(动量梯度下降法)</h1>]]></content>
    
    
    
    <tags>
      
      <tag>拓展</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot</title>
    <link href="/2023/06/28/Springboot/"/>
    <url>/2023/06/28/Springboot/</url>
    
    <content type="html"><![CDATA[<h1 id="xml-ssm文件配置"><a href="#xml-ssm文件配置" class="headerlink" title="xml-ssm文件配置"></a>xml-ssm文件配置</h1><ol><li><p>在maven中配置springmvc</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在项目处右键，选择Open Module Setting，创建resourcs和webapp等标准的文件。</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230420104459445.png" alt="image-20230420104459445"></p></li><li><p>创建controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在resources处创建Spring config文件</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230420104751637.png" alt="image-20230420104751637"></p><p>创建applicationContext.xml和spring-serlvet.xml文件</p><p>applicationContext.xml文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.xgfm&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p>spring-servlet.xml文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.xgfm&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>web.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>HelloService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloService</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello ssm&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>HelloController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    HelloService helloService;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        String hello=helloService.hello();<br>        System.out.println(<span class="hljs-string">&quot;hello=&quot;</span>+hello);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>然后运行tomcat就可运行了</p></li></ol><h1 id="java-ssm文件配置"><a href="#java-ssm文件配置" class="headerlink" title="java-ssm文件配置"></a>java-ssm文件配置</h1><ol><li><p>在maven中配置springmvc</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写HelloController</p></li><li><p>编写java写的config组件</p></li><li><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230420192601901.png" alt="image-20230420192601901"></p></li></ol><p>config文件如图</p><p><mark>踩坑记录1</mark></p><p>在pom.xml中没写以下代码，导致无法配置tomcat</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><p><mark>踩坑记录2</mark></p><p>webInit</p><p>报错：目前未解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ServletRegistration.<span class="hljs-type">Dynamic</span> <span class="hljs-variable">springMVC</span> <span class="hljs-operator">=</span> servletContext.addServlet(<span class="hljs-string">&quot;springMVC&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DispatcherServlet</span>(ctx));<br></code></pre></td></tr></table></figure><h1 id="springboot创建"><a href="#springboot创建" class="headerlink" title="springboot创建"></a>springboot创建</h1><ol><li>创建新模块，选择Spring Initializr，并且配置模块相关的基本信息</li></ol><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230411200505151.png" alt="image-20230411200505151"></p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230411200525468.png" alt="image-20230411200525468"></p><ul><li>4是取包名</li><li>5选择与之相对应的jdk版本</li><li>6.7日常下一步</li><li>然后选择Spring web，并且版本号选择2.x.x开头的，高版本的JDK8不适配</li></ul><p>另附其他俩种方法：</p><ol><li><p>在线创建：<a href="https://start.spring.io/">https://start.spring.io</a></p></li><li><p>Maven改造</p></li><li><p>也可以使用国内阿里云提供的start站</p><p><a href="http://start.aliyun.com/">http://start.aliyun.com</a></p></li></ol><h1 id="Springboot部分注解"><a href="#Springboot部分注解" class="headerlink" title="Springboot部分注解"></a>Springboot部分注解</h1><p>@SpringBootConfiguration</p><p>@EnableAutoConfiguration</p><p>@ComponentScan</p><h6 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h6><p>@Import注解</p><p>在原生的spring Framework中，组件装配逐步升级</p><ol><li>spring2.5+ @Component</li><li>spring3.0+ @Configuration+@Bean</li><li>spring3.1+ @EnableXXX+@Import</li></ol><p>@ComponentScan注解</p><p>对启动项进行包扫描</p><h1 id="Maven标签–parent"><a href="#Maven标签–parent" class="headerlink" title="Maven标签–parent"></a>Maven标签–parent</h1><ol><li>定义java的编译版本</li><li>定义项目编码格式</li><li>定义依赖的版本号</li><li>项目打包配置</li><li>自动化的资源过滤</li><li>自动化的插件配置</li></ol><h1 id="Web容器配置"><a href="#Web容器配置" class="headerlink" title="Web容器配置"></a>Web容器配置</h1><p>springboot支持三个服务</p><p>目前使用servlet技术栈</p><p>可以使用的服务器分别是tomcat，jetty和undertow</p><h6 id="选择web容器配置"><a href="#选择web容器配置" class="headerlink" title="选择web容器配置"></a>选择web容器配置</h6><p>在application.prooerties中配置</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230422114654681.png" alt="image-20230422114654681"></p><p>第一行为web容器选择</p><p>server.port代表端口的选择</p><p>最后一行为是否压缩容器</p><h1 id="tomcat容器配置"><a href="#tomcat容器配置" class="headerlink" title="tomcat容器配置"></a>tomcat容器配置</h1><p>开启访问日志，默认的日志位置在项目运行的临时目录中</p><p>日志设置语句如下</p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230422195855205.png" alt="image-20230422195855205" style="zoom:200%;" /><h1 id="HTTPS证书配置"><a href="#HTTPS证书配置" class="headerlink" title="HTTPS证书配置"></a>HTTPS证书配置</h1><ol><li>生成https证书</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">keytool -genkey -<span class="hljs-built_in">alias</span> myhttps -keyalg RSA -keysize 2048 -keystore xgfm_key.p12 -validity 365<br></code></pre></td></tr></table></figure><p>2.在application.properties中配置证书</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.ssl.key-alias</span>=<span class="hljs-string">myhttps</span><br><span class="hljs-attr">server.ssl.key-store</span>=<span class="hljs-string">classpath:xgfm_key.p12</span><br><span class="hljs-attr">server.ssl.key-store-password</span>=<span class="hljs-string">111111</span><br></code></pre></td></tr></table></figure><p>3.创建config文件</p><p>配置tomcat文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.demo02.config;<br><br><span class="hljs-keyword">import</span> org.apache.catalina.Context;<br><span class="hljs-keyword">import</span> org.apache.catalina.connector.Connector;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.descriptor.web.SecurityCollection;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.descriptor.web.SecurityConstraint;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TomcatConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    TomcatServletWebServerFactory <span class="hljs-title function_">tomcatServletWebServerFactory</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">TomcatServletWebServerFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TomcatServletWebServerFactory</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessContext</span><span class="hljs-params">(Context context)</span> &#123;<br>                SecurityConstraint securityConstraint=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityConstraint</span>();<br>                securityConstraint.setUserConstraint(<span class="hljs-string">&quot;CONFIDENTIAL&quot;</span>);<br>                <span class="hljs-type">SecurityCollection</span> <span class="hljs-variable">collection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityCollection</span>();<br>                collection.addPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>                securityConstraint.addCollection(collection);<br>                context.addConstraint(securityConstraint);<br>            &#125;<br>        &#125;;<br>        factory.addAdditionalTomcatConnectors(myConnectors());<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Connector <span class="hljs-title function_">myConnectors</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Connector</span> <span class="hljs-variable">connector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Connector</span>(<span class="hljs-string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);<br>        connector.setScheme(<span class="hljs-string">&quot;http&quot;</span>);<br>        connector.setPort(<span class="hljs-number">8081</span>);<br>        connector.setSecure(<span class="hljs-literal">false</span>);<br>        connector.setRedirectPort(<span class="hljs-number">8080</span>);<br>        <span class="hljs-keyword">return</span> connector;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="配置文件名称和路径"><a href="#配置文件名称和路径" class="headerlink" title="配置文件名称和路径"></a>配置文件名称和路径</h1><p>配置文件有4个位置</p><p>-config&#x2F;application.properties</p><p>-application.properties</p><p> -src&#x2F;main&#x2F;resources&#x2F;config&#x2F;application.properties</p><p>-src&#x2F;main&#x2F;resources&#x2F;application.properties</p><p>(偷一张我帅气班长的图)</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230423104517383.png" alt="image-20230423104517383"></p><p>四个的优先级是依次降低的</p><p>同时可以进行自定义配置文件路径</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230423105007625.png" alt="image-20230423105007625"></p><p>注意<mark>配置文件的路径要以&#x2F;结尾</mark></p><p>如果自定义配置文件的路径，打包完运行jar包的时候，要用spring.config.loaction进行指定</p><p>例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">java</span> <span class="hljs-string">-jar xxx.jar --spring.config.location=calsspath:/xgfm/</span><br></code></pre></td></tr></table></figure><p>但这些一般情况下是没有必要的</p><p>文件名称也是可以进行更换的</p><p>比如创建xgfm.properites</p><p>然后在project setting同样进行配置</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230423110904470.png" alt="image-20230423110904470"></p><p>文件中有一个properites就可以了</p><p>如果自定义文件的名称也要在运行jar包的时候，用spring.config.name进行指定</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">java -jar xxx.jar --spring.config.name=xgfm<br></code></pre></td></tr></table></figure><h1 id="普通属性注入"><a href="#普通属性注入" class="headerlink" title="普通属性注入"></a>普通属性注入</h1><p><mark>为了避免中文乱码，要在设置中的editor-file Encodings中的文件编码为UTF-8</mark></p><p>可以在application.properties中输入属性，在model处使用，数组属性需要使用英文逗号进行分隔</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230423113356674.png" alt="image-20230423113356674"></p><p>使用value注解，其中数组也是可以注入的</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230423114343006.png" alt="image-20230423114343006"></p><p>这是spring的普通属性注入，与springboot无太大关系</p><p>并且在有的时候会将这些注入写在其他的properties中，避免application.properties过于臃肿，然后会写在一个xxx.properties之中，这时候就需要手动加载该properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(&quot;classpath:xxx.properties&quot;)</span><br></code></pre></td></tr></table></figure><h1 id="类型安全的属性注入"><a href="#类型安全的属性注入" class="headerlink" title="类型安全的属性注入"></a>类型安全的属性注入</h1><p>使用以下语句进行类型安全的属性注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;xxx&quot;)</span><br></code></pre></td></tr></table></figure><p> xxx为文件的名称前缀，然后就会自动注入</p><p>使用类型安全的属性注入的代码案例如下</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230423164442627.png" alt="image-20230423164442627"></p><h1 id="properties引用Maven中的配置"><a href="#properties引用Maven中的配置" class="headerlink" title="properties引用Maven中的配置"></a>properties引用Maven中的配置</h1><p>在properties中引用Maven中的配置，应该使用@...@，而不是${….}，不然会和本地起冲突</p><h1 id="使用短命令行参数"><a href="#使用短命令行参数" class="headerlink" title="使用短命令行参数"></a>使用短命令行参数</h1><p>在终端启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar properties-0.0.1-SNAPSHOT.jar --server.port=8081<br></code></pre></td></tr></table></figure><p>如果省略server将不会生效，如果想要能够生效，需要在application.properties中配置以下信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">$&#123;port&#125;</span><br></code></pre></td></tr></table></figure><p>这个情况下，以下代码能够有效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar properties-0.0.1-SNAPSHOT.jar --port=8081<br></code></pre></td></tr></table></figure><p>但是如果配置了properties，但没有输入，则会报错，那么我们就需要这么写properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">$&#123;port:8080&#125;</span><br></code></pre></td></tr></table></figure><p>这种情况下，如果没有port输入，则自动使用8080作为端口启动</p><h1 id="YAML配置"><a href="#YAML配置" class="headerlink" title="YAML配置"></a>YAML配置</h1><p>将application的文件后缀更改为yaml或者yml</p><p>yaml配置是有顺序的，而properties是无序的，这是两者的差距，并且yaml支持自动配置除application以外的文件名称，改文件名是完全没有必要的</p><p>yaml配置是比较自动化的，编写属性会有跳出的提示</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230423230226791.png" alt="image-20230423230226791"></p><p>并且强制要求：后要有空格，否则将会报错，这个空格一定不能少</p><p>案例：</p><p>同样的book的属性注入</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230423230708151.png" alt="image-20230423230708151"></p><p>要这也进行编写，注意小说后都有一个空格</p><p>案例中分别有单个属性，普通数组，对象数组的注入</p><p>注意格式的要求</p><h1 id="内省机制"><a href="#内省机制" class="headerlink" title="内省机制"></a>内省机制</h1><p>属性注入是根据get和set方法进行判断该使用哪个get方法进行注入。这是利用了java中的反射机制（这里也只是提一嘴），并且该机制与yaml和properties无关，是自带的</p><h1 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h1><p>不同情况下要使用的环境是不同的，重复更改环境会很麻烦，springboot准备了生产环境切换</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230424111857791.png" alt="image-20230424111857791"></p><p>然后再application.properties中配置生产环境</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">dev</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">prod</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">test</span><br></code></pre></td></tr></table></figure><h1 id="JAVA日志配置"><a href="#JAVA日志配置" class="headerlink" title="JAVA日志配置"></a>JAVA日志配置</h1><p>日志框架分为日志门面和日志实现</p><p><a href="https://mp.weixin.qq.com/s/kkp2PTC3rbmHlXHnF95FLw">日志配置文章</a></p><p>这里需要了解清楚日志体系</p><h1 id="SpringBoot日志配置"><a href="#SpringBoot日志配置" class="headerlink" title="SpringBoot日志配置"></a>SpringBoot日志配置</h1><p>springboot的默认日志门面是Logback</p><p>还是这个哦</p><p><a href="https://mp.weixin.qq.com/s/kkp2PTC3rbmHlXHnF95FLw">日志配置文章</a></p><h1 id="SpingBoot-Thymeleaf"><a href="#SpingBoot-Thymeleaf" class="headerlink" title="SpingBoot+Thymeleaf"></a>SpingBoot+Thymeleaf</h1><p><a href="https://mp.weixin.qq.com/s/Uvv1q3iQn2IwAB1crHWS1g"> Spring Boot+Thymeleaf</a></p><p>传统Java模板引擎不同的是，Thymeleaf支持HTML原型</p><h1 id="Thymeleaf实践"><a href="#Thymeleaf实践" class="headerlink" title="Thymeleaf实践"></a>Thymeleaf实践</h1><p>创建项目时候需要导入模板</p><p>选择以下俩项</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230424230929874.png" alt="image-20230424230929874"></p><p>然后在application.properties中导入以下设置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># THYMELEAF (ThymeleafAutoConfiguration)</span><br><span class="hljs-comment"># 开启模板缓存（默认值： true ）</span><br><span class="hljs-attr">spring.thymeleaf.cache</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 检查模板是否存在，然后再呈现</span><br><span class="hljs-attr">spring.thymeleaf.check-template</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 检查模板位置是否正确（默认值 :true ）</span><br><span class="hljs-attr">spring.thymeleaf.check-template-location</span>=<span class="hljs-string">true</span><br><span class="hljs-comment">#Content-Type 的值（默认值： text/html ）</span><br><span class="hljs-attr">spring.thymeleaf.content-type</span>=<span class="hljs-string">text/html</span><br><span class="hljs-comment"># 开启 MVC Thymeleaf 视图解析（默认值： true ）</span><br><span class="hljs-attr">spring.thymeleaf.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 模板编码</span><br><span class="hljs-attr">spring.thymeleaf.encoding</span>=<span class="hljs-string">UTF-8</span><br><span class="hljs-comment"># 要被排除在解析之外的视图名称列表，⽤逗号分隔</span><br><span class="hljs-attr">spring.thymeleaf.excluded-view-names</span>=<span class="hljs-string"></span><br><span class="hljs-comment"># 要运⽤于模板之上的模板模式。另⻅ StandardTemplate-ModeHandlers( 默认值： HTML5)</span><br><span class="hljs-attr">spring.thymeleaf.mode</span>=<span class="hljs-string">HTML5</span><br><span class="hljs-comment"># 在构建 URL 时添加到视图名称前的前缀（默认值： classpath:/templates/ ）</span><br><span class="hljs-attr">spring.thymeleaf.prefix</span>=<span class="hljs-string">classpath:/templates/</span><br><span class="hljs-comment"># 在构建 URL 时添加到视图名称后的后缀（默认值： .html ）</span><br><span class="hljs-attr">spring.thymeleaf.suffix</span>=<span class="hljs-string">.html</span><br><br></code></pre></td></tr></table></figure><p>编写User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.thymeleaf;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddress</span><span class="hljs-params">(String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>编写UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.thymeleaf;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(Model model)</span>&#123;<br>        List&lt;User&gt; users=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            User u=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>            u.setId(i);<br>            u.setUsername(<span class="hljs-string">&quot;xgfm&quot;</span>+i);<br>            u.setAddress(<span class="hljs-string">&quot;www.xgfm.com&quot;</span>+i);<br>            users.add(u);<br>        &#125;<br>        model.addAttribute(<span class="hljs-string">&quot;users&quot;</span>,users);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>创建hello.html(此处的html有遍历，可以借鉴一下)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;u : $&#123;users&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.address&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Thymeleaf手动渲染"><a href="#Thymeleaf手动渲染" class="headerlink" title="Thymeleaf手动渲染"></a>Thymeleaf手动渲染</h1><p>自动渲染时直接返回到前端页面的</p><p>为了方便编写测试类进行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThymeleafApplicationTests</span> &#123;<br><span class="hljs-meta">@Autowired</span><br>TemplateEngine templateEngine;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Context</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>ctx.setVariable(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;佛耶戈&quot;</span>);<br>ctx.setVariable(<span class="hljs-string">&quot;position&quot;</span>,<span class="hljs-string">&quot;太痛了&quot;</span>);<br>ctx.setVariable(<span class="hljs-string">&quot;salary&quot;</span>,<span class="hljs-string">&quot;600000&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">mail</span> <span class="hljs-operator">=</span> templateEngine.process(<span class="hljs-string">&quot;mail&quot;</span>, ctx);<br>System.out.println(mail);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello,欢迎！<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>佛耶戈<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>加入破败军团，您的入职信息如下<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>职位<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>太痛了<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>薪水<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>600000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样就可以手动渲染结果了</p><p><mark>目前还有一些莫名其妙的报错，尚未解决，另外还不知道怎么把手动渲染结果直接输出到前端页面</mark></p><p>先放一下</p><h1 id="Thymeleaf简单表达式"><a href="#Thymeleaf简单表达式" class="headerlink" title="Thymeleaf简单表达式"></a>Thymeleaf简单表达式</h1><p>表达式语法包含如下</p><h6 id=""><a href="#" class="headerlink" title="${}"></a>${}</h6><p> 最普通和常见的引用类型</p><p>可以直接进行引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;address&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>*{}和${}用起来的效果是相近的</p><h6 id="-1"><a href="#-1" class="headerlink" title="*{}"></a>*{}</h6><p>与上面的${}效果类似，所以用起来是没有很大差距的</p><h6 id="-2"><a href="#-2" class="headerlink" title="#{}"></a>#{}</h6><p>主要用于国际化</p><p>messages.properties</p><p>message_zh_CN.properties</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230425121801212.png" alt="image-20230425121801212"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;hello&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>根据浏览器的语言环境进行选择</p><p>中文环境选择message_zh_CN.properties，英文环境选择messages.properties</p><h6 id="-3"><a href="#-3" class="headerlink" title="@{}"></a>@{}</h6><p>引用URL地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">//绝对地址<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;https://localhost:8080/hello.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>//相对地址<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;~/hello.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>//协议地址<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;//localhost:8080/hello.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>//带参数的URL<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;//localhost:8080/hello.js(name=&#x27;zhengru&#x27;,age=99)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>//自动加载上下文相关的地址<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/hello.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Thymeleaf各种表达式"><a href="#Thymeleaf各种表达式" class="headerlink" title="Thymeleaf各种表达式"></a>Thymeleaf各种表达式</h1><h6 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h6><ul><li>文本字面量</li><li>数字字面量</li><li>布尔字面量</li><li>Null字面量</li><li>字面量标记</li></ul><h6 id="文本运算"><a href="#文本运算" class="headerlink" title="文本运算"></a>文本运算</h6><p>如果字符串中包含EL表达式输出的变量，也可以使用另一种简答的方式，叫做字面量置换</p><p>即使用||替换”…”+”…”</p><p>例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;hello&#x27;+$&#123;user.username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">|hello$&#123;user.username&#125;|</span>&quot;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这俩都能一起使用</p><h6 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h6><ul><li>二元运算符：and, or</li><li>布尔非（一元运算符）：!, not</li></ul><h6 id="比较和相等"><a href="#比较和相等" class="headerlink" title="比较和相等"></a>比较和相等</h6><p>表达式里的值可以使用 <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> 和 <code>&lt;=</code> 符号比较。<code>==</code> 和 <code>!=</code> 运算符用于检查相等（或者不相等）。注意 <code>XML</code>规定 <code>&lt;</code> 和 <code>&gt;</code> 标签不能用于属性值，所以应当把它们转义为 <code>&lt;</code> 和 <code>&gt;</code></p><p>如果不想转义，也可以使用别名：gt (&gt;)；lt (&lt;)；ge (&gt;&#x3D;)；le (&lt;&#x3D;)；not (!)。还有 eq (&#x3D;&#x3D;), neq&#x2F;ne (!&#x3D;)</p><h6 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h6><p>类似于我们 Java 中的三目运算符</p><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><h6 id="基本内置对象："><a href="#基本内置对象：" class="headerlink" title="基本内置对象："></a>基本内置对象：</h6><ul><li>#ctx：上下文对象。</li><li>#vars: 上下文变量。</li><li>#locale：上下文区域设置。</li><li>#request：（仅在 Web 上下文中）HttpServletRequest 对象。</li><li>#response：（仅在 Web 上下文中）HttpServletResponse 对象。</li><li>#session：（仅在 Web 上下文中）HttpSession 对象。</li><li>#servletContext：（仅在 Web 上下文中）ServletContext 对象。</li></ul><h6 id="实用内置对象："><a href="#实用内置对象：" class="headerlink" title="实用内置对象："></a>实用内置对象：</h6><ul><li>#execInfo：有关正在处理的模板的信息。</li><li>#messages：在变量表达式中获取外部化消息的方法，与使用＃{…}语法获得的方式相同。</li><li>#uris：转义URL &#x2F; URI部分的方法</li><li>#conversions：执行配置的转换服务（如果有）的方法。</li><li>#dates：java.util.Date对象的方法：格式化，组件提取等</li><li>#calendars：类似于#dates但是java.util.Calendar对象。</li><li>#numbers：用于格式化数字对象的方法。</li><li>#strings：String对象的方法：contains，startsWith，prepending &#x2F; appending等</li><li>#objects：一般对象的方法。</li><li>#bools：布尔评估的方法。</li><li>#arrays：数组方法。</li><li>#lists：列表的方法。</li><li>#sets：集合的方法。</li><li>#maps：地图方法。</li><li>#aggregates：在数组或集合上创建聚合的方法。</li><li>#ids：处理可能重复的id属性的方法（例如，作为迭代的结果）。</li></ul><p>相对应的方法可以在属性值中查看</p><h1 id="设置属性值"><a href="#设置属性值" class="headerlink" title="设置属性值"></a>设置属性值</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;src=@&#123;/1.png&#125;,title=$&#123;user.username&#125;,alt=$&#123;user.username&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/myapp/1.png&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;javaboy&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;javaboy&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/1.png&#125;&quot;</span> <span class="hljs-attr">th:alt</span>=<span class="hljs-string">&quot;$&#123;user.username&#125;&quot;</span> <span class="hljs-attr">th:title</span>=<span class="hljs-string">&quot;$&#123;user.username&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/1.png&#125;&quot;</span> <span class="hljs-attr">th:alt-title</span>=<span class="hljs-string">&quot;$&#123;user.username&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><p>遍历的状态支持</p><ul><li>index 当前索引从0开始</li><li>count 当前索引从1开始</li><li>size   被遍历的元素数量</li><li>current 每次遍历的遍历变量</li><li>odd   当前的遍历是偶数还是奇数</li><li>first 当前是否为第一次遍历</li><li>last 当前是否为最后遍历</li></ul><h1 id="Thymeleaf分支语句"><a href="#Thymeleaf分支语句" class="headerlink" title="Thymeleaf分支语句"></a>Thymeleaf分支语句</h1><p>th:if语句,该判断语句不仅只接受布尔值，其他类型的值同样也接受</p><p>true|false输出如下</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230427121106376.png" alt="image-20230427121106376"></p><p>th:unless语句</p><p>就是th:if语句的取反</p><p>th:switch,case语句</p><p>情况判断语句，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">//在外面包裹一层遍历语句<br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:switch</span>=<span class="hljs-string">&quot;$&#123;state.add&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>odd<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;*&quot;</span>&gt;</span>even<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h1><p>可以使用th:with定义一个本地变量，前面已经提到并且使用过了，这里就不再过多赘述了</p><h1 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h1><p>可以使用属性将数据放入页面模板之中，但是很多时候内联的方式看起来更加直观和简洁一些，并且拼接也会显得更加自然一些，例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello [[$&#123;user.username&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>[[...]]</code> 对应于 th:text （结果会是转义的 HTML）</p><p><code>[(...)]</code>对应于 th:text，它不会执行任何的 HTML 转义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:with</span>=<span class="hljs-string">&quot;str=&#x27;hello &lt;strong&gt;javaboy&lt;/strong&gt;&#x27;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>[[$&#123;str&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>[($&#123;str&#125;)]<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>显示结果分别是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一行为hello &lt;strong&gt;javaboy&lt;/strong&gt;<br><span class="hljs-regexp">//</span>第二行为hello javaboy(javaboy为加粗后的)<br></code></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/s/Uvv1q3iQn2IwAB1crHWS1g"> Spring Boot+Thymeleaf</a></p><p>总的来说，可以多看几遍该文章</p><p> 在script中使用，要这样使用</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230429010821615.png" alt="image-20230429010821615"></p><h1 id="SpingBoot-Freemarker"><a href="#SpingBoot-Freemarker" class="headerlink" title="SpingBoot+Freemarker"></a>SpingBoot+Freemarker</h1><p>经典之开篇给文章！</p><p><a href="https://mp.weixin.qq.com/s/JuhFrDbmLMcJB60hfRMyTg">SpingBoot+Freemarker</a></p><p> Freemarker不是面向最终用户的，而是一个java类库，可以将其作为以一个普通的组件嵌入到我们产品之中的</p><p>模板的后缀为.ftlh</p><p><code>FreeMarkerProperties</code>中则配置了<code>Freemarker</code>的基本信息，例如模板位置在 <code>classpath:/templates/</code> ，再例如模板后缀为 <code>.ftlh</code>，那么这些配置我们以后都可以在<code>application.properties</code>中进行修改</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230429014241037.png" alt="image-20230429014241037"></p><h1 id="freemarker实践"><a href="#freemarker实践" class="headerlink" title="freemarker实践"></a>freemarker实践</h1><p>创建项目时候需要导入模板</p><p>选择以下俩项</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230429012748315.png" alt="image-20230429012748315"></p><p>和thymeleaf有点类似的说实话</p><p>如果需要修改模板文件位置，可以在application.properties中进行配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.freemarker.allow-request-override</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.freemarker.allow-session-override</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.freemarker.cache</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.freemarker.charset</span>=<span class="hljs-string">UTF-8</span><br><span class="hljs-attr">spring.freemarker.check-template-location</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.freemarker.content-type</span>=<span class="hljs-string">text/html</span><br><span class="hljs-attr">spring.freemarker.expose-request-attributes</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.freemarker.expose-session-attributes</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.freemarker.suffix</span>=<span class="hljs-string">.ftl</span><br><span class="hljs-attr">spring.freemarker.template-loader-path</span>=<span class="hljs-string">classpath:/templates/</span><br></code></pre></td></tr></table></figure><p>配置文件按照顺序依次解释如下：</p><ol><li>HttpServletRequest的属性是否可以覆盖controller中model的同名项</li><li>HttpSession的属性是否可以覆盖controller中model的同名项</li><li>是否开启缓存</li><li>模板文件编码</li><li>是否检查模板位置</li><li>Content-Type的值</li><li>是否将HttpServletRequest中的属性添加到Model中</li><li>是否将HttpSession中的属性添加到Model中</li><li>模板文件后缀</li><li>模板文件位置</li></ol><h1 id="Freemarker直接输出值"><a href="#Freemarker直接输出值" class="headerlink" title="Freemarker直接输出值"></a>Freemarker直接输出值</h1><p>可以直接输出的字符串（即不需要转义的）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;&quot;hello,我是直接输出的语句&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要转义的输出字符串看眼添加r的标记</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;r&quot;C:/&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>定义变量语句</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#assign price=99&gt;<br></code></pre></td></tr></table></figure><p>可以看看freemarker的内联语句，同样是十分高效的</p><h1 id="认识主流JSON框架"><a href="#认识主流JSON框架" class="headerlink" title="认识主流JSON框架"></a>认识主流JSON框架</h1><p>springMVC框架中，Jackson和gson已经自动配置好了。</p><p>HttpMessageConverter</p><p>转换器：对象——&gt;json，json——&gt;对象</p><p>所有的json工具都会提供各自的HttpMessageConverter</p><h1 id="Spring-boot-整合Jackson"><a href="#Spring-boot-整合Jackson" class="headerlink" title="Spring boot 整合Jackson"></a>Spring boot 整合Jackson</h1><h6 id="JsonProperty"><a href="#JsonProperty" class="headerlink" title="@JsonProperty"></a>@JsonProperty</h6><p>指定属性序列化&#x2F;反序列化时的名称，默认名称就是属性名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonProperty(value=&quot;aaaage&quot;,index=99)</span><br><span class="hljs-keyword">private</span> Integer age;<br></code></pre></td></tr></table></figure><p>value为属性名称， index是json序列化和反序列化的顺序索引</p><h6 id="JsonIgnore"><a href="#JsonIgnore" class="headerlink" title="@JsonIgnore"></a>@JsonIgnore</h6><p>忽略掉相对应的数据</p><p>并且序列化和反序列化的时候都会忽略掉该字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonIgnore</span><br><span class="hljs-keyword">private</span> String address;<br></code></pre></td></tr></table></figure><h6 id="JsonIgnoreProperties"><a href="#JsonIgnoreProperties" class="headerlink" title="@JsonIgnoreProperties()"></a>@JsonIgnoreProperties()</h6><p>括号中输入value数组，批量忽略数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonIgnoreProperties(&#123;&quot;birthday&quot;,&quot;address&quot;&#125;)</span><br></code></pre></td></tr></table></figure><h6 id="JsonFormat"><a href="#JsonFormat" class="headerlink" title="@JsonFormat()"></a>@JsonFormat()</h6><p>这个是格式化输入数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonFormat(pattern =&quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;Asia/Shanghai&quot;)</span><br><span class="hljs-keyword">private</span> Date birthday;<br></code></pre></td></tr></table></figure><p>日期格式化，timezone是日期格式化</p><h6 id="使用MVCConfig进行内置配置"><a href="#使用MVCConfig进行内置配置" class="headerlink" title="使用MVCConfig进行内置配置"></a>使用MVCConfig进行内置配置</h6><p>创建一个WebMvcCofig文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    ObjectMapper <span class="hljs-title function_">objectMapper</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setDateFormat(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-mm-dd hh:mm:ss&quot;</span>));<br>        <span class="hljs-keyword">return</span>  om;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在config中设置，这样可以避免重复书写，该工程中所有的实体类的时间的格式都会统一成写的pattern。</p><h1 id="Spring-boot-整合gson"><a href="#Spring-boot-整合gson" class="headerlink" title="Spring boot 整合gson"></a>Spring boot 整合gson</h1><p>首先需要将jackson的包从maven中排除出去</p><p>使用如下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加在dependency中排除相对应的artifactId的jar包</p><p>然后添加gson的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>gson的格式可以在application中进行配置</p><h6 id="properties配置"><a href="#properties配置" class="headerlink" title="properties配置"></a>properties配置</h6><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.gson.date-format</span>=<span class="hljs-string">yyyy-mm-dd hh:mm:ss</span><br><span class="hljs-comment">#是否禁用HTML的转义字符</span><br><span class="hljs-attr">spring.gson.disable-html-escaping</span>=<span class="hljs-string">true</span><br><span class="hljs-comment">#序列化时是否排除内部类</span><br><span class="hljs-attr">spring.gson.disable-inner-class-serialization</span>=<span class="hljs-string">false</span><br><span class="hljs-comment">#序列化时是否启用复杂映射键</span><br><span class="hljs-attr">spring.gson.enable-complex-map-key-serialization</span>=<span class="hljs-string"></span><br><span class="hljs-comment">#是否排除没有@Expose 注解的字段</span><br><span class="hljs-attr">spring.gson.exclude-fields-without-expose-annotation</span>=<span class="hljs-string"></span><br><span class="hljs-comment">#序列化时字段名的命名策略</span><br><span class="hljs-attr">spring.gson.field-naming-policy</span>=<span class="hljs-string"></span><br><span class="hljs-comment">#在输出前添加一些特殊的文本来生成一个不可执行的json</span><br><span class="hljs-attr">spring.gson.generate-non-executable-json</span>=<span class="hljs-string"></span><br><span class="hljs-comment">#是否序列化空字段</span><br><span class="hljs-attr">spring.gson.serialize-nulls</span>=<span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>或者也可以使用</p><h6 id="WebMvcConfig配置"><a href="#WebMvcConfig配置" class="headerlink" title="WebMvcConfig配置"></a>WebMvcConfig配置</h6><p>会重载原本的处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    GsonBuilder <span class="hljs-title function_">gsonBuilder</span><span class="hljs-params">()</span>&#123;<br>        GsonBuilder gsonBuilder=<span class="hljs-keyword">new</span> <span class="hljs-title class_">GsonBuilder</span>();<br>        gsonBuilder.setDateFormat(<span class="hljs-string">&quot;yyyy-mm-dd hh:mm:ss&quot;</span>);<br>        <span class="hljs-keyword">return</span> gsonBuilder;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring-boot-处理静态资源"><a href="#Spring-boot-处理静态资源" class="headerlink" title="Spring boot 处理静态资源"></a>Spring boot 处理静态资源</h1><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230507184758670.png" alt="image-20230507184758670"></p><p>springboot的静态资源默认存放在static下</p><p>并且访问静态资源时不需要添加static</p><p>静态资源放置的位置：</p><ol><li>&#x2F;META-INF&#x2F;resources&#x2F;</li><li>&#x2F;resources&#x2F;</li><li>&#x2F;static&#x2F;</li><li>&#x2F;public&#x2F;</li><li>在webapp下直接放置（十分不常用）</li></ol><p><mark>优先级从上向下降低</mark></p><h1 id="自定义静态资源配置"><a href="#自定义静态资源配置" class="headerlink" title="自定义静态资源配置"></a>自定义静态资源配置</h1><p>如果没有配置，直接访问resources中的资源会被拦截，并且报错404</p><h6 id="properties-文件配置"><a href="#properties-文件配置" class="headerlink" title="properties 文件配置"></a>properties 文件配置</h6><p>这时候就需要手动配置以下文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.web.resources.static-locations</span>=<span class="hljs-string">classpath:/</span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">/**</span><br></code></pre></td></tr></table></figure><p><mark>第一行配置表示定义资源位置，第二行配置表示定义请求 URL 规则</mark></p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230507191534778.png" alt="image-20230507191534778"></p><p>这样能够通过访问localhost:8080&#x2F;javaboy&#x2F;01.html</p><p>如果在properties下配置的是classpath:&#x2F;javaboy&#x2F;  </p><p>那么需要访问localhost:8080&#x2F;01.html</p><h6 id="Java代码配置"><a href="#Java代码配置" class="headerlink" title="Java代码配置"></a>Java代码配置</h6><p>创建一个WebMvcConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/xg/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/xgfm/&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 用java代码进行配置的意思就是用addResourceHandler的内容来映射addResourceLocations的内容。</p><p>在上面里的例子中，即可通过访问  localhost:8080&#x2F;xg&#x2F;01.html来访问resources下的xgfm包中的01.html静态资源</p><h1 id="Spring-boot单文件上传"><a href="#Spring-boot单文件上传" class="headerlink" title="Spring boot单文件上传"></a>Spring boot单文件上传</h1><p>&#x2F;&#x2F;该内容用static_resources的工程文件一起练习</p><p>首先写一个提交文件的页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>写一个controller处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploadController</span> &#123;<br>    SimpleDateFormat sdf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;/yyyy/mm/dd/&quot;</span>);<br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file, HttpServletRequest request)</span>&#123;<br>        <span class="hljs-comment">//获取临时目录</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        String path=realPath+ format;<br>        File folder=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>        <span class="hljs-keyword">if</span> (!folder.exists())&#123;<br>            folder.mkdirs();<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">oldName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">newName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString()+oldName.substring(oldName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>        <span class="hljs-keyword">try</span> &#123;<br>            file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(folder,newName));<br>            String s=request.getScheme()+<span class="hljs-string">&quot;://&quot;</span>+request.getServerName()+<span class="hljs-string">&quot;:&quot;</span>+request.getServerPort()+format+newName;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时，还可以在properties中配置其他信息</p><p>比如限制单个文件的大小和限制所有文件的大小</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.servlet.multipart.max-file-size</span>=<span class="hljs-string">1MB</span><br><span class="hljs-attr">spring.servlet.multipart.max-request-size</span>=<span class="hljs-string">10MB</span><br></code></pre></td></tr></table></figure><h1 id="Spring-boot多文件上传"><a href="#Spring-boot多文件上传" class="headerlink" title="Spring boot多文件上传"></a>Spring boot多文件上传</h1><h6 id="合并多文件"><a href="#合并多文件" class="headerlink" title="合并多文件"></a>合并多文件</h6><p>在controller的形参中用数组接受输入的文件，再用for循环遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploadController2</span> &#123;<br>    SimpleDateFormat sdf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;/yyyy/mm/dd/&quot;</span>);<br>    <span class="hljs-meta">@PostMapping(&quot;/upload2&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile[] files, HttpServletRequest request)</span>&#123;<br>        <span class="hljs-comment">//获取临时目录</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        String path=realPath+ format;<br>        File folder=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>        <span class="hljs-keyword">if</span> (!folder.exists())&#123;<br>            folder.mkdirs();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (MultipartFile file : files) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">oldName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">newName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString()+oldName.substring(oldName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>                    file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(folder,newName));<br>                    String s=request.getScheme()+<span class="hljs-string">&quot;://&quot;</span>+request.getServerName()+<span class="hljs-string">&quot;:&quot;</span>+request.getServerPort()+format+newName;<br>                System.out.println(s);<br>                    <span class="hljs-keyword">return</span> s;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="独立多文件"><a href="#独立多文件" class="headerlink" title="独立多文件"></a>独立多文件</h6><p>controller如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploadController3</span> &#123;<br>    SimpleDateFormat sdf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;/yyyy/mm/dd/&quot;</span>);<br>    <span class="hljs-meta">@PostMapping(&quot;/upload3&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file1, MultipartFile file2,HttpServletRequest request)</span>&#123;<br>        <span class="hljs-comment">//获取临时目录</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        String path=realPath+ format;<br>        File folder=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>        <span class="hljs-keyword">if</span> (!folder.exists())&#123;<br>            folder.mkdirs();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">oldName1</span> <span class="hljs-operator">=</span> file1.getOriginalFilename();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">newName1</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + oldName1.substring(oldName1.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>            file1.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(folder, newName1));<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort() + format + newName1;<br>            System.out.println(s);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">oldName2</span> <span class="hljs-operator">=</span> file2.getOriginalFilename();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">newName2</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString()+oldName2.substring(oldName1.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>            file1.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(folder,newName2));<br>            String s2=request.getScheme()+<span class="hljs-string">&quot;://&quot;</span>+request.getServerName()+<span class="hljs-string">&quot;:&quot;</span>+request.getServerPort()+format+newName2;<br>            System.out.println(s2);<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring-boot-AJAX文件上传"><a href="#Spring-boot-AJAX文件上传" class="headerlink" title="Spring boot+AJAX文件上传"></a>Spring boot+AJAX文件上传</h1><p>与之前类似，但需要记得配置jq的script，以及编写函数时不要出现错误。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.7.0.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha256-JlqSTELeR4TLqP0OG9dxM7yDPqX1ox/HfgiSLBj8+kM=&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;uploadFile()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;JavaScript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">uploadFile</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> file = $(<span class="hljs-string">&quot;#file&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> formData =<span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();</span><br><span class="language-javascript">        formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;file&quot;</span>,file);</span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;/upload&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">processData</span>:<span class="hljs-literal">false</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">contentType</span>:<span class="hljs-literal">false</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>:formData,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">msg</span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&quot;#result&quot;</span>).<span class="hljs-title function_">html</span>(msg);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="ControllerAdvice注解的使用"><a href="#ControllerAdvice注解的使用" class="headerlink" title="ControllerAdvice注解的使用"></a>ControllerAdvice注解的使用</h1><p>练习在controlleradvice和static_resources中</p><p>@ControllerAdvice有三方面的功能：</p><ol><li>全局异常处理</li><li>全局数据绑定</li><li>全局数据预处理</li></ol><h6 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h6><p>分别有以下俩种形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-comment">//该注解返回页面、视图</span><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-comment">//该注解可以返回一段字符串或者json</span><br></code></pre></td></tr></table></figure><p> 这里使用第二种进行练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyGlobalException</span> &#123;<br><span class="hljs-comment">//    @ExceptionHandler(Exception.class)</span><br><span class="hljs-comment">//    public String customException(Exception e)&#123;</span><br><span class="hljs-comment">//        return e.getMessage();</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">customException</span><span class="hljs-params">(Exception e)</span>&#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;javaboy&quot;</span>);<br>        mv.addObject(<span class="hljs-string">&quot;error&quot;</span>,e.getMessage());<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="全局数据绑定"><a href="#全局数据绑定" class="headerlink" title="全局数据绑定"></a>全局数据绑定</h6><p>ModelAttribute</p><p>后面用到了ModelAttribute注解，主要有两个作用</p><ol><li>在数据回显时，给变量定义别名</li><li>定义全局数据</li></ol><p>当用户访问当前Controller中的任意一个方法，在返回数据时，都会将添加了@ModelAttribute注解的方法的返回值，一起返回给前端</p><p>编写自定义的Data类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyGlobalData</span> &#123;<br>    <span class="hljs-meta">@ModelAttribute</span><br>    <span class="hljs-keyword">public</span> Map&lt;String,String&gt; <span class="hljs-title function_">mydata</span><span class="hljs-params">()</span>&#123;<br>        Map&lt;String,String&gt;info=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        info.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;javaboy&quot;</span>);<br>        info.put(<span class="hljs-string">&quot;address&quot;</span>,<span class="hljs-string">&quot;www.javaboy.org&quot;</span>);<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如此一来info便成为了全局变量，在hellocontroller中便可以进行调用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">(Model model)</span>&#123;<br>        Map&lt;String,Object&gt;asMap=model.asMap();<br>        Map&lt;String,String&gt; info = (Map&lt;String, String&gt;) asMap.get(<span class="hljs-string">&quot;map&quot;</span>);<br>        Set&lt;String&gt; keySet=info.keySet();<br>        <span class="hljs-keyword">for</span> (String s:keySet)&#123;<br>            System.out.println(s+<span class="hljs-string">&quot;+---+&quot;</span>+info.get(s));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="请求全局数据预处理"><a href="#请求全局数据预处理" class="headerlink" title="请求全局数据预处理"></a>请求全局数据预处理</h6><p>在发送请求时，可能遇到接口设计不当导致，出现命名冲突，此时可以通过全局数据预处理进行修复。</p><p>controllerAdvice</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyGlobalData</span> &#123;<br>    <span class="hljs-meta">@InitBinder(&quot;a&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">(WebDataBinder binder)</span>&#123;<br>        binder.setFieldDefaultPrefix(<span class="hljs-string">&quot;a.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@InitBinder(&quot;b&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">(WebDataBinder binder)</span>&#123;<br>        binder.setFieldDefaultPrefix(<span class="hljs-string">&quot;b.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;/book&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute(&quot;b&quot;)</span> Book book,<span class="hljs-meta">@ModelAttribute(&quot;a&quot;)</span> Author author)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book=&quot;</span>+book);<br>        System.out.println(<span class="hljs-string">&quot;author=&quot;</span>+author);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="异常页面定义"><a href="#异常页面定义" class="headerlink" title="异常页面定义"></a>异常页面定义</h1><p>404问题自动寻找异常页面的优先级，其他同理</p><p>（精确高于模糊，动态高于静态）</p><ol><li>templates&#x2F;error&#x2F;404.html</li><li>static&#x2F;error&#x2F;404.html</li><li>templates&#x2F;error&#x2F;4xx.html</li><li>static&#x2F;error&#x2F;4xx.html</li></ol><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230618204213873.png" alt="image-20230618204213873"></p><h6 id="动态定义异常页面"><a href="#动态定义异常页面" class="headerlink" title="动态定义异常页面"></a>动态定义异常页面</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>500-templates<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>path<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;path&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;error&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>message<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>timestamp<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;timestamp&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>status<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;status&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样可以将异常以表格的方式输出到前端页面。</p><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>通常是不需要的，因为springboot提供的异常已经足够使用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyErrorAttributes</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultErrorAttributes</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getErrorAttributes</span><span class="hljs-params">(WebRequest webRequest, ErrorAttributeOptions options)</span> &#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-built_in">super</span>.getErrorAttributes(webRequest, options);<br>        <span class="hljs-keyword">if</span> ((Integer) map.get(<span class="hljs-string">&quot;status&quot;</span>)==<span class="hljs-number">404</span>)&#123;<br>            map.put(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;页面不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先继承DefaultErrorAttributes然后根据现呈的数据进行定义修改或者添加，一般是没有必要去重写BasicErrorController。</p><p>同时也可以去自定义视图。</p><h1 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h1><p>明确了解域的概念</p><p>域：协议+域名&#x2F;IP+端口</p><p>如果三个中有不一样的，则说明跨域了。</p><h6 id="方法一：添加注解"><a href="#方法一：添加注解" class="headerlink" title="方法一：添加注解"></a>方法一：添加注解</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CrossOrigin(value = &quot;http://localhost:8081&quot;,maxAge = 1800)</span><br></code></pre></td></tr></table></figure><p>其后可以添加限制条件等其他</p><p>添加在类上说明类中的所有方法都可以，在方法上则对单独的方法有效</p><h6 id="方法二：编写WebMvcConfig"><a href="#方法二：编写WebMvcConfig" class="headerlink" title="方法二：编写WebMvcConfig"></a>方法二：编写WebMvcConfig</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)<br>                .allowedMethods(<span class="hljs-string">&quot;*&quot;</span>)<br>                .allowedOrigins(<span class="hljs-string">&quot;http://localhost:8081&quot;</span>)<br>                .maxAge(<span class="hljs-number">1800</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写config组件，修改响应头</p><h6 id="方法三：注入corsfilter"><a href="#方法三：注入corsfilter" class="headerlink" title="方法三：注入corsfilter"></a>方法三：注入corsfilter</h6><p>使用Bean注释，将corsFilter注入到spring容器之中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><span class="hljs-comment">//    @Override</span><br><span class="hljs-comment">//    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="hljs-comment">//        registry.addMapping(&quot;/**&quot;)</span><br><span class="hljs-comment">//                .allowedHeaders(&quot;*&quot;)</span><br><span class="hljs-comment">//                .allowedMethods(&quot;*&quot;)</span><br><span class="hljs-comment">//                .allowedOrigins(&quot;http://localhost:8081&quot;)</span><br><span class="hljs-comment">//                .maxAge(1800);</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-meta">@Bean</span><br>    CorsFilter <span class="hljs-title function_">corsFilter</span><span class="hljs-params">()</span>&#123;<br>        UrlBasedCorsConfigurationSource source=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();<br>        CorsConfiguration cfg=<span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br>        cfg.addAllowedOrigin(<span class="hljs-string">&quot;http://localhost:8081&quot;</span>);<br>        cfg.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>,cfg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsFilter</span>(source);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring-boot导入XML配置"><a href="#Spring-boot导入XML配置" class="headerlink" title="Spring boot导入XML配置"></a>Spring boot导入XML配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span><br></code></pre></td></tr></table></figure><p>在Application中输入如上的注释即可完成，注入。</p><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>与过滤器比较像，我们可以使用拦截器做很多工作</p><ul><li>日志记录</li><li>权限检查</li><li>性能监控</li><li>….</li></ul><p>拦截器类编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.interceptor;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-comment">//该方法返回false，请求将不再继续往下走，所有将默认的false改成true</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;preHandle&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//controller被执行之后被调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;postHandle&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//当preHandle方法返回true，该方法才会执行，可以进行一些清理操作等</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterCompletion&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>preHandle<ul><li>返回false，请求将不再继续执行</li></ul></li><li>postHandle<ul><li>Controller执行之后被调用</li></ul></li><li>afterCompletion<ul><li>preHandle返回true才会执行</li></ul></li></ul><p>然后配置WebMvcConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.interceptor;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterceptor</span>()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>).excludePathPatterns(<span class="hljs-string">&quot;/hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>addPathPatterns为添加拦截路径。</p><p>excludePathPatterns为添加白名单。</p><p>最后使用HelloController进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.interceptor;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello interceptor&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello2&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello2 interceptor&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当访问hello时，并没控制台输出</p><p>当访问hello2时，控制输出如下</p><p>preHandle<br>postHandle<br>afterCompletion</p><p>即调用了拦截器</p><h1 id="系统启动任务"><a href="#系统启动任务" class="headerlink" title="系统启动任务"></a>系统启动任务</h1><h6 id="CommandLineRunner"><a href="#CommandLineRunner" class="headerlink" title="CommandLineRunner"></a>CommandLineRunner</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Order(100)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCommandLineRunner01</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;args1 = &quot;</span> + Arrays.toString(args));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Order(99)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCommandLineRunner02</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;args2 = &quot;</span> + Arrays.toString(args));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>开机自启动任务</p><h6 id="ApplicationRunner"><a href="#ApplicationRunner" class="headerlink" title="ApplicationRunner"></a>ApplicationRunner</h6><p>与commandLineRunner一起进行练习，因为比较相似。</p><p>二者功能和用法是类似的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Order(98)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(ApplicationArguments args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        List&lt;String&gt; nonOptionArgs = args.getNonOptionArgs();<br>        System.out.println(<span class="hljs-string">&quot;nonOptionArgs1 = &quot;</span> + nonOptionArgs);<br>        Set&lt;String&gt; optionNames = args.getOptionNames();<br>        <span class="hljs-keyword">for</span> (String optionName : optionNames) &#123;<br>            System.out.println(optionName + <span class="hljs-string">&quot;-1-&gt;&quot;</span> + args.getOptionValues(optionName));<br>        &#125;<br>        String[] sourceArgs = args.getSourceArgs();<br>        System.out.println(<span class="hljs-string">&quot;sourceArgs1 = &quot;</span> + Arrays.toString(sourceArgs));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Springboot-Web组件"><a href="#Springboot-Web组件" class="headerlink" title="Springboot+Web组件"></a>Springboot+Web组件</h1><h6 id="Servlet类"><a href="#Servlet类" class="headerlink" title="Servlet类"></a>Servlet类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doGet(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyServlet&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="Filter类"><a href="#Filter类" class="headerlink" title="Filter类"></a>Filter类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyFilter&quot;</span>);<br>        chain.doFilter(request,response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="Listener类"><a href="#Listener类" class="headerlink" title="Listener类"></a>Listener类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RequestContextListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent requestEvent)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;requestInitialized&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent requestEvent)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;requestDestroyed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="Application中扫描"><a href="#Application中扫描" class="headerlink" title="Application中扫描"></a>Application中扫描</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ServletComponentScan(&quot;com.xgfm.webcomponent&quot;)</span> <span class="hljs-comment">//扫描包名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebcomponentApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        SpringApplication.run(WebcomponentApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring-boot注册过滤器"><a href="#Spring-boot注册过滤器" class="headerlink" title="Spring boot注册过滤器"></a>Spring boot注册过滤器</h1><h6 id="使用WebFilter和Component注解"><a href="#使用WebFilter和Component注解" class="headerlink" title="使用WebFilter和Component注解"></a>使用WebFilter和Component注解</h6><p>但是这样无法定义Filter的优先级</p><h6 id="使用Component注解"><a href="#使用Component注解" class="headerlink" title="使用Component注解"></a>使用Component注解</h6><p>单单使用Component注解，然后使用Order进行配置优先级。但这样无法配置路径，只能拦截所有的路径</p><h6 id="使用FilterConfiguration类和Bean注解"><a href="#使用FilterConfiguration类和Bean注解" class="headerlink" title="使用FilterConfiguration类和Bean注解"></a>使用FilterConfiguration类和Bean注解</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    FilterRegistrationBean&lt;MyFilter04&gt; <span class="hljs-title function_">filter04FilterRegistrationBean04</span><span class="hljs-params">()</span>&#123;<br>        FilterRegistrationBean&lt;MyFilter04&gt; bean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>&lt;&gt;();<br>        bean.setOrder(<span class="hljs-number">90</span>);<br>        bean.setFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFilter04</span>());<br>        bean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/*&quot;</span>));<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    FilterRegistrationBean&lt;MyFilter05&gt; <span class="hljs-title function_">filter05FilterRegistrationBean05</span><span class="hljs-params">()</span>&#123;<br>        FilterRegistrationBean&lt;MyFilter05&gt; bean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>&lt;&gt;();<br>        bean.setOrder(<span class="hljs-number">89</span>);<br>        bean.setFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFilter05</span>());<br>        bean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/*&quot;</span>));<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>filter正常编写</p><h1 id="Springboot路径映射"><a href="#Springboot路径映射" class="headerlink" title="Springboot路径映射"></a>Springboot路径映射</h1><p>使用WebMvcConfig进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br>        registry.addViewController(<span class="hljs-string">&quot;/02&quot;</span>).setViewName(<span class="hljs-string">&quot;02&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用对应的add方法添加路径进行映射，但这样存在缺陷，其中Model配置的模板无法渲染动态化的数据，会导致页面为静态页面。</p><h1 id="参数类型转换"><a href="#参数类型转换" class="headerlink" title="参数类型转换"></a>参数类型转换</h1><p>练习内容为usermanager</p><p>如果正常写并且使用controller如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;/user1&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;user= &quot;</span>+user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>会导致400错误，因为输入数据无法成为user类的实体对象传入，这时候就要定义一个转换器。</p><p>MyDataConverter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDataConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Converter</span>&lt;String,Date&gt; &#123;<br>    SimpleDateFormat sdf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-mm-dd&quot;</span>);<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">convert</span><span class="hljs-params">(String source)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> sdf.parse(source);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对输入的一个数据进行转换，使得controller能够接受，然后进入adduser方法</p><p>出现如下传参方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/user2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser2</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;user= &quot;</span>+user);<br>&#125;<br></code></pre></td></tr></table></figure><p>@RequestBody该注释就要使用json格式传入。</p><p><mark>post请求，参数可以是key&#x2F;value形式，也可以是json形式.自定义的类型转换器对key&#x2F;value形式的参数有效。json形式的参数，不需要类型转换器。json字符串是通过HttpMessageConverter转换为User对象</mark></p><h1 id="自定义项目首页和角标"><a href="#自定义项目首页和角标" class="headerlink" title="自定义项目首页和角标"></a>自定义项目首页和角标</h1><p>优先找静态然后再找动态，配置webmvcconfig如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br>        registry.addViewController(<span class="hljs-string">&quot;/index&quot;</span>).setViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>角标就在五个放置资源的地方放一个<code>favicon.ico</code>即可，不需要其他的配置</p><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>练习在welcomepage之中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.welcomepage;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.xgfm.welcomepage.UserService.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pc1</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-meta">@Before(&quot;pc1()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint jp)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span>jp.getSignature().getName();<br>        System.out.println(name+<span class="hljs-string">&quot;方法开始执行了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@After(&quot;pc1()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">After</span><span class="hljs-params">(JoinPoint jp)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span>jp.getSignature().getName();<br>        System.out.println(name+<span class="hljs-string">&quot;方法执行结束了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterReturning(value = &quot;pc1()&quot;,returning = &quot;s&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(JoinPoint jp,String s)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jp.getSignature().getName();<br>        System.out.println(name + <span class="hljs-string">&quot;方法返回值是 &quot;</span> + s);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;pc1()&quot;,throwing = &quot;e&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(JoinPoint jp,Exception e)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jp.getSignature().getName();<br>        System.out.println(name + <span class="hljs-string">&quot;方法抛出了异常 &quot;</span> + e);<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;pc1()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> pjp.proceed();<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="jdbcTemplate"><a href="#jdbcTemplate" class="headerlink" title="jdbcTemplate"></a>jdbcTemplate</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.48<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再给一下mysql驱动。</p><p>首先需要在application.properties中配置一下数据库的基本信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">1234</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql:///test01?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span><br><br></code></pre></td></tr></table></figure><p>另外上述配置完，我的电脑依旧会报错，然后我另外添加了这个</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><p>结果就能够运行了</p><p>编写的service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.jdbctemplate.service;<br><br><span class="hljs-keyword">import</span> com.xgfm.jdbctemplate.model.User;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.PreparedStatementCreator;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.RowMapper;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.support.GeneratedKeyHolder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>&#123;<br>        <span class="hljs-type">int</span> result=jdbcTemplate.update(<span class="hljs-string">&quot;insert into user (username,address) values(?,?)&quot;</span>,user.getUsername(),user.getAddress());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addUser2</span><span class="hljs-params">(User user)</span>&#123;<br>        GeneratedKeyHolder keyHolder=<span class="hljs-keyword">new</span> <span class="hljs-title class_">GeneratedKeyHolder</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PreparedStatementCreator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> PreparedStatement <span class="hljs-title function_">createPreparedStatement</span><span class="hljs-params">(Connection con)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>                <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> con.prepareStatement(<span class="hljs-string">&quot;insert into user (username,address) values(?,?)&quot;</span>, Statement.RETURN_GENERATED_KEYS);<br>                ps.setString(<span class="hljs-number">1</span>, user.getUsername());<br>                ps.setString(<span class="hljs-number">2</span>, user.getAddress());<br>                <span class="hljs-keyword">return</span> ps;<br>            &#125;<br>        &#125;, keyHolder);<br>        user.setId(keyHolder.getKey().longValue());<br>        <span class="hljs-keyword">return</span> update;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>&#123;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.update(<span class="hljs-string">&quot;delete from user where id=?&quot;</span>,id);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateById</span><span class="hljs-params">(Long id,String username)</span>&#123;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.update(<span class="hljs-string">&quot;update user set username=? where id = ?&quot;</span>,username,id);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAllUsers</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; query = jdbcTemplate.query(<span class="hljs-string">&quot;select * from user&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RowMapper</span>&lt;User&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> User <span class="hljs-title function_">mapRow</span><span class="hljs-params">(ResultSet resultSet, <span class="hljs-type">int</span> rowNum)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;username&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;address&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;id&quot;</span>);<br>                <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>                user.setAddress(address);<br>                user.setUsername(username);<br>                user.setId(Long.parseLong(id));<br>                <span class="hljs-keyword">return</span> user;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> query;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>并且运用test进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.jdbctemplate;<br><br><span class="hljs-keyword">import</span> com.xgfm.jdbctemplate.model.User;<br><span class="hljs-keyword">import</span> com.xgfm.jdbctemplate.service.UserService;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbctemplateApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        User user=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(<span class="hljs-string">&quot;xgfm&quot;</span>);<br>        user.setAddress(<span class="hljs-string">&quot;xgfmccc&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> userService.addUser(user);<br>        System.out.println(i);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        User user=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(<span class="hljs-string">&quot;lxm&quot;</span>);<br>        user.setAddress(<span class="hljs-string">&quot;xiaomengege&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> userService.addUser2(user);<br>        System.out.println(<span class="hljs-string">&quot;i= &quot;</span>+i);<br>        System.out.println(<span class="hljs-string">&quot;user.getId()= &quot;</span>+user.getId());<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        userService.deleteById(<span class="hljs-number">9L</span>);<br>        userService.updateById(<span class="hljs-number">5L</span>,<span class="hljs-string">&quot;lxm&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; allUsers = userService.getAllUsers();<br>        <span class="hljs-keyword">for</span> (User allUser : allUsers) &#123;<br>            System.out.println(allUser.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这部分与jbdc非常类似，所以就不额外再记录什么了</p><h1 id="jdbcTemplate多数据源"><a href="#jdbcTemplate多数据源" class="headerlink" title="jdbcTemplate多数据源"></a>jdbcTemplate多数据源</h1><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230622161540117.png" alt="image-20230622161540117"></p><p>像这样配置2个，用two和one加在中间进行区分，然后配置DataSourceConfig和JdbcTemplateConfig进行导入配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.jdbctemplatemulti.config;<br><br><span class="hljs-keyword">import</span> com.zaxxer.hikari.HikariDataSource;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource.one&quot;)</span><br>    DataSource <span class="hljs-title function_">dsOne</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariDataSource</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource.two&quot;)</span><br>    DataSource <span class="hljs-title function_">dsTwo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariDataSource</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.jdbctemplatemulti.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcTemplateConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    JdbcTemplate <span class="hljs-title function_">jdbcTemplateOne</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;dsOne&quot;)</span> DataSource ds)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>(ds);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    JdbcTemplate <span class="hljs-title function_">jdbcTemplateTwo</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;dsTwo&quot;)</span> DataSource ds)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>(ds);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spirngboot-MyBatis"><a href="#Spirngboot-MyBatis" class="headerlink" title="Spirngboot+MyBatis"></a>Spirngboot+MyBatis</h1><p>先配置properties，然后在Application前添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(basePackages = &quot;com.xgfm.mybatis.mapper&quot;)</span><br><br></code></pre></td></tr></table></figure><p>进行包扫描，找出全部的mapper文件</p><p>例子：</p><p>UserMapper和他的测试类们</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> com.xgfm.mybatis.model.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.*;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span><br>    User <span class="hljs-title function_">userGetById</span><span class="hljs-params">(Long id)</span>;<br><br>    <span class="hljs-comment">//column为原来的，但这样很麻烦,这是解决model与数据库中的属性名称冲突的results</span><br>    <span class="hljs-meta">@Results(&#123;@Result(property = &quot;address&quot;,column = &quot;address&quot;)&#125;)</span><br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    List&lt;User&gt; <span class="hljs-title function_">getAllUsers</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into user (username,address) values(#&#123;username&#125;,#&#123;address&#125;)&quot;)</span><br>    <span class="hljs-meta">@SelectKey(statement = &quot;select last_insert_id()&quot;,keyProperty = &quot;id&quot;,before = false,resultType = Long.class)</span><br>    Integer <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span><br>    Integer <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>;<br><br>    <span class="hljs-meta">@Update(&quot;update user set username = #&#123;username&#125; where id = #&#123;id&#125;&quot;)</span><br>    Integer <span class="hljs-title function_">updateById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username,<span class="hljs-meta">@Param(&quot;id&quot;)</span> Long id)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里把@Mapper注释掉是因为在application中配置了包扫描。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>   UserMapper userMapper;<br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.userGetById(<span class="hljs-number">5L</span>);<br>       System.out.println(user);<br>   &#125;<br><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>       User user=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>       user.setUsername(<span class="hljs-string">&quot;siyuan&quot;</span>);<br>       user.setAddress(<span class="hljs-string">&quot;cenima&quot;</span>);<br>       userMapper.addUser(user);<br>       <span class="hljs-type">Long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> user.getId();<br>       System.out.println(id);<br>   &#125;<br></code></pre></td></tr></table></figure><p>测试类</p><h1 id="Spirngboot-MyBatis（XML）"><a href="#Spirngboot-MyBatis（XML）" class="headerlink" title="Spirngboot+MyBatis（XML）"></a>Spirngboot+MyBatis（XML）</h1><p>mapper</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br>        <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">                <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">                <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.xgfm.mybatis.mapper.UserMapper2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.xgfm.mybatis.model.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userGetById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUsers&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>        select * from user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span>  <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.xgfm.mybatis.model.User&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into user (username,address) values (#&#123;username&#125;,#&#123;address&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteById&quot;</span>&gt;</span><br>        delete from user where id =#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateById&quot;</span>&gt;</span><br>        update user set username=#&#123;username&#125; where id =#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> com.xgfm.mybatis.model.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.*;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper2</span> &#123;<br>    User <span class="hljs-title function_">userGetById</span><span class="hljs-params">(Long id)</span>;<br>    List&lt;User&gt; <span class="hljs-title function_">getAllUsers</span><span class="hljs-params">()</span>;<br>    Integer <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br>    Integer <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>;<br>    Integer <span class="hljs-title function_">updateById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username, <span class="hljs-meta">@Param(&quot;id&quot;)</span> Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以将xml映射文件放置到java的mapper中去，此时就需要在pom.xml文件之中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果想把xml直接放置在resources的mapper下，可以在properties中配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mappers/*.xml</span><br></code></pre></td></tr></table></figure><h1 id="Mybatis多数据源"><a href="#Mybatis多数据源" class="headerlink" title="Mybatis多数据源"></a>Mybatis多数据源</h1><p>首先配置config</p><ol><li><p>与jdbcTemplate相同的DataSourceConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource.one&quot;)</span><br>    DataSource <span class="hljs-title function_">dsOne</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariDataSource</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource.two&quot;)</span><br>    DataSource <span class="hljs-title function_">dsTwo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariDataSource</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>完成DataSource的创建</p></li><li><p>配置MybatisConfigOne和MybatisConfigTwo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.mybatismulti.config;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;<br><span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionTemplate;<br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(basePackages = &quot;com.xgfm.mybatismulti.mapper1&quot;,sqlSessionFactoryRef =&quot;sqlSessionFactory1&quot;,sqlSessionTemplateRef = &quot;sqlSessionTemplate1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisConfigOne</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;dsOne&quot;)</span><br>    DataSource ds;<br><br>    <span class="hljs-meta">@Bean</span><br>    SqlSessionFactory <span class="hljs-title function_">sqlSessionFactory1</span><span class="hljs-params">()</span>&#123;<br>        SqlSessionFactory sqlSessionFactory=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>            bean.setDataSource(ds);<br>            sqlSessionFactory = bean.getObject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    SqlSessionTemplate <span class="hljs-title function_">sqlSessionTemplate1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionTemplate</span>(sqlSessionFactory1());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>需要注意的是添加包扫描注释</p></li><li><p>创建mapper1和mapper2分别存储不同的mapper文件,与mybatisxml类似，这里就不记录了，但还是需要在resoures同目录配置，否则会找不到（因为我比较喜欢在resources下放xml）</p></li><li><p>与mybatis一样写映射文件即可</p></li></ol><h1 id="Mybatis主从复制、JPA"><a href="#Mybatis主从复制、JPA" class="headerlink" title="Mybatis主从复制、JPA"></a>Mybatis主从复制、JPA</h1><p>docker搭建2个mysql，然后修改mysqld.cnf改不明白，先跳过了</p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(<span class="hljs-string">&quot;xgfm&quot;</span>);<br>        user.setAddress(<span class="hljs-string">&quot;xgfmccc&quot;</span>);<br>        <span class="hljs-type">ValueOperations</span> <span class="hljs-variable">ops</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue();<br>        ops.set(<span class="hljs-string">&quot;u&quot;</span>,user);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> (User) ops.get(<span class="hljs-string">&quot;u&quot;</span>);<br>        System.out.println(u);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        ValueOperations&lt;String, String&gt; ops = stringRedisTemplate.opsForValue();<br>        ops.set(<span class="hljs-string">&quot;xgfm&quot;</span>,<span class="hljs-string">&quot;xgfmccc&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">xgfm</span> <span class="hljs-operator">=</span> ops.get(<span class="hljs-string">&quot;xgfm&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;xgfm = &quot;</span> + xgfm);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>给一些kongzhitai代码</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">--进入redis容器</span><br>docker exec -<span class="hljs-keyword">it</span> redis redis-cli<br><span class="hljs-comment">--展示所有key</span><br><span class="hljs-built_in">keys</span> *<br><span class="hljs-comment">--验证密码</span><br>auth <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h1 id="Session共享"><a href="#Session共享" class="headerlink" title="Session共享"></a>Session共享</h1><p>将tomcat的session存入redis之中，三个tomcat就可以共用一个session</p><p>引入session，web，redis依赖</p><p>在8080和8081端口都开启服务，发现8081可以获取到8080的session中的数据，这是因为spring session使用代理过滤器，将所有的session操作拦截，自动同步至redis之中，也同时自动的从redis之中读取数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    Integer port;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/set&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">set</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>        session.setAttribute(<span class="hljs-string">&quot;xgfm&quot;</span>,<span class="hljs-string">&quot;xgfmccc&quot;</span>);<br>        <span class="hljs-keyword">return</span> String.valueOf(port);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/get&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>        String xgfm= (String) session.getAttribute(<span class="hljs-string">&quot;xgfm&quot;</span>);<br>        <span class="hljs-keyword">return</span> xgfm+<span class="hljs-string">&quot;:&quot;</span>+port;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最主要的是要引入spring session的依赖才能实现该功能。</p><h1 id="redis处理接口幂等性"><a href="#redis处理接口幂等性" class="headerlink" title="redis处理接口幂等性"></a>redis处理接口幂等性</h1><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230623210246030.png" alt="image-20230623210246030"></p><p>要编写的东西有这些</p><p>机制就是自定义注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoIdempotent &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后创建拦截器，在拦截器之中检查有没有带上token，如果没有则通过自定义异常来抛出token相关问题。如果有token或者该方法没有使用自定义的注释（即该方法不需要幂等性，不需要检查有无token）则返回true，进行下一步。</p><p>再放一下拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IdempotentInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    TokenService tokenService;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (!(handler <span class="hljs-keyword">instanceof</span> HandlerMethod))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ((HandlerMethod) handler).getMethod();<br>        <span class="hljs-type">AutoIdempotent</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> method.getAnnotation(AutoIdempotent.class);<br>        <span class="hljs-keyword">if</span> (annotation!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> tokenService.checkToken(request);<br>            &#125; <span class="hljs-keyword">catch</span> (IdempotentException e) &#123;<br>                <span class="hljs-keyword">throw</span> e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中的token则是用UUID生成，用tokenService和RedisService进行检查。</p><p>再放一下俩个service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.idempontent.token;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.ValueOperations;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setEx</span><span class="hljs-params">(String key,String value,Long expireTime)</span>&#123;<br>        <span class="hljs-type">boolean</span> result=<span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ValueOperations&lt;String,String&gt;ops=stringRedisTemplate.opsForValue();<br>            ops.set(key,value);<br>            stringRedisTemplate.expire(key,expireTime, TimeUnit.SECONDS);<br>            result=<span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">exists</span><span class="hljs-params">(String key)</span>&#123;<br>        <span class="hljs-keyword">return</span> stringRedisTemplate.hasKey(key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(String key)</span>&#123;<br>        <span class="hljs-keyword">if</span> (exists(key))&#123;<br>            <span class="hljs-keyword">return</span> stringRedisTemplate.delete(key);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.idempontent.token;<br><br>        <span class="hljs-keyword">import</span> com.xgfm.idempontent.exception.IdempotentException;<br>        <span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br>        <span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<br>        <span class="hljs-keyword">import</span> org.springframework.http.HttpRequest;<br>        <span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br>        <span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br>        <span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br>        <span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    RedisService redisService;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createToken</span><span class="hljs-params">()</span>&#123;<br>        String uuid= UUID.randomUUID().toString();<br>        redisService.setEx(uuid,uuid,<span class="hljs-number">10000L</span>);<br>        <span class="hljs-keyword">return</span> uuid;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkToken</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IdempotentException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token))&#123;<br>            token = request.getParameter(<span class="hljs-string">&quot;token&quot;</span>);<br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token))&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IdempotentException</span>(<span class="hljs-string">&quot;token 不存在&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!redisService.exists(token))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IdempotentException</span>(<span class="hljs-string">&quot;重复操作！&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> redisService.remove(token);<br>        <span class="hljs-keyword">if</span> (!remove)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IdempotentException</span>(<span class="hljs-string">&quot;重复操作！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="RESTful简介"><a href="#RESTful简介" class="headerlink" title="RESTful简介"></a>RESTful简介</h1><p>REST是一种Web软件架构风格，是一种风格，并不是标准。匹配或兼容这种架构风格的网络服务称为REST服务。在SpringBoot中构建RESTful非常容易，因为其提供了自动化配置方案。</p><h1 id="快速构建RESTful应用"><a href="#快速构建RESTful应用" class="headerlink" title="快速构建RESTful应用"></a>快速构建RESTful应用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity(name=&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>创建model并且添加如上注释</p><p>再添加一个空的dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.restful.dao;<br><br><span class="hljs-keyword">import</span> com.xgfm.restful.model.User;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;User,Long&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>然后就可以直接通过访问路径进行相对的操作了，非常方便</p><h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><p>get</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/users/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h6 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h6><p>post&#x2F;json添加数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span>/users<br></code></pre></td></tr></table></figure><h6 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h6><p>put&#x2F;json</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/users/</span><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h6 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://localhost:8080/users?page=0&amp;size=3&amp;<span class="hljs-built_in">sort</span>=<span class="hljs-built_in">id</span>,desc<br></code></pre></td></tr></table></figure><h1 id="RESTful定制操作"><a href="#RESTful定制操作" class="headerlink" title="RESTful定制操作"></a>RESTful定制操作</h1><h6 id="RestResource注解"><a href="#RestResource注解" class="headerlink" title="@RestResource注解"></a>@RestResource注解</h6><p>自定义一些数据库操作在userDao中定义声明方法，不用写对应的实现，但要满足对应的要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;User,Long&gt; &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">findUserByUsernameIs</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span>String username)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以添加@RestResource来选择暴露的路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestResource(path = &quot;byname&quot;)</span><br>    List&lt;User&gt; <span class="hljs-title function_">findUserByUsernameIs</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span>String username)</span>;<br></code></pre></td></tr></table></figure><p>比如这样之后，访问查询路径就不再是…&#x2F;findUserByUsernameIs{?username}而是…&#x2F;byname{?username}了</p><p>这个注解还能够屏蔽原有的方法</p><p>比如我想要屏蔽deleteById，只需要重写该方法并且注释给定exported值为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@RestResource(exported = false)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long along)</span>;<br></code></pre></td></tr></table></figure><h6 id="RepositoryRestResource注解"><a href="#RepositoryRestResource注解" class="headerlink" title="@RepositoryRestResource注解"></a>@RepositoryRestResource注解</h6><p>path,默认类名为users，例如修改为people，那么路径中的users要改为users</p><p>collectionResourceRel指的是下图users处</p><p>itemResourceRel指的是下图蓝色处</p><p><img src="C:\Users\g1o2a\AppData\Roaming\Typora\typora-user-images\image-20230626002555365.png" alt="image-20230626002555365"></p><h1 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h1><p>传统SSM中就可以使用</p><p>是缓存体系的抽象实现</p><ul><li>@EnableCaching</li><li>@Cacheable</li><li>@CachePut</li><li>@CacheEvict</li><li>@Caching</li><li>@CacheConfig</li></ul><p>配置redis的properties</p><h6 id="EnableCaching"><a href="#EnableCaching" class="headerlink" title="@EnableCaching"></a>@EnableCaching</h6><p>在application中添加该注解，开启缓存功能</p><p>参数使用的基本都是默认即可</p><h6 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Cacheable(cacheNames = &quot;star&quot;)</span><br></code></pre></td></tr></table></figure><p>对应方法开启缓存，需要添加cacheNames（前缀）否则会报错</p><h6 id="CacheConfig"><a href="#CacheConfig" class="headerlink" title="@CacheConfig"></a>@CacheConfig</h6><p>这个注解在类上使用，用来描述该类中所有方法使用的缓存前缀，也可以不使用该注解，直接在方法前使用@Cacheable</p>]]></content>
    
    
    
    <tags>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javaweb</title>
    <link href="/2023/06/28/javaweb/"/>
    <url>/2023/06/28/javaweb/</url>
    
    <content type="html"><![CDATA[<h1 id="带有Servlet的webapp"><a href="#带有Servlet的webapp" class="headerlink" title="带有Servlet的webapp"></a>带有Servlet的webapp</h1><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><h6 id="第一步：在webapps目录下新建一个目录，起名crm（webapp的名字）"><a href="#第一步：在webapps目录下新建一个目录，起名crm（webapp的名字）" class="headerlink" title="第一步：在webapps目录下新建一个目录，起名crm（webapp的名字）"></a>第一步：在webapps目录下新建一个目录，起名crm（webapp的名字）</h6><h6 id="第二步：在webapp的根目录下新建目录：WEB-INF"><a href="#第二步：在webapp的根目录下新建目录：WEB-INF" class="headerlink" title="第二步：在webapp的根目录下新建目录：WEB-INF"></a>第二步：在webapp的根目录下新建目录：WEB-INF</h6><p>注意：该名称为Servlet的规范规定，必须一致</p><h6 id="第三步：在WEB-INF目录下新建classes"><a href="#第三步：在WEB-INF目录下新建classes" class="headerlink" title="第三步：在WEB-INF目录下新建classes"></a>第三步：在WEB-INF目录下新建classes</h6><p>注意：这也是Servlet的规范</p><h6 id="第四步-在WEB-INF下新建目录：lib"><a href="#第四步-在WEB-INF下新建目录：lib" class="headerlink" title="第四步 在WEB-INF下新建目录：lib"></a>第四步 在WEB-INF下新建目录：lib</h6><p>注意：这个不是必须的，用于导入jar包，但位置和名称需要符合规范</p><h6 id="第五步在WEB-INF的目录下新建web-xml"><a href="#第五步在WEB-INF的目录下新建web-xml" class="headerlink" title="第五步在WEB-INF的目录下新建web.xml"></a>第五步在WEB-INF的目录下新建web.xml</h6><p>web.xml是一个配置文件，，是必须的，描述了Servlet和请求路径之间的对照关系，该文件可以从其他的webapp中拷贝，没有手写的必要</p><h6 id="第六步：编写java程序，该程序必须实现Servlet的接口"><a href="#第六步：编写java程序，该程序必须实现Servlet的接口" class="headerlink" title="第六步：编写java程序，该程序必须实现Servlet的接口"></a>第六步：编写java程序，该程序必须实现Servlet的接口</h6><p>servlet接口不在JDK中，是Oracle提供的，是javaEE的规范中的一员</p><p>tomcat实现了servlet接口</p><h6 id="在web-xml路径下注册servlet"><a href="#在web-xml路径下注册servlet" class="headerlink" title="在web.xml路径下注册servlet"></a>在web.xml路径下注册servlet</h6><h2 id="向浏览器响应一段HTML代码"><a href="#向浏览器响应一段HTML代码" class="headerlink" title="向浏览器响应一段HTML代码"></a>向浏览器响应一段HTML代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest,ServletResponse response)</span>&#123;<br>    response <span class="hljs-title function_">setContentType</span><span class="hljs-params">(<span class="hljs-string">&quot;text/html；charset=UTK-8&quot;</span>)</span>;<br>    <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>    out.print(html代码);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="在servlet中连接数据库，怎么做？"><a href="#在servlet中连接数据库，怎么做？" class="headerlink" title="在servlet中连接数据库，怎么做？"></a>在servlet中连接数据库，怎么做？</h1><p>在Servlet中直接编写java代码即可(JDBC)</p><h1 id="如何在集成开发环境中创建servlet程序？"><a href="#如何在集成开发环境中创建servlet程序？" class="headerlink" title="如何在集成开发环境中创建servlet程序？"></a>如何在集成开发环境中创建servlet程序？</h1><ol><li><p>新建一个empty project，并且取名</p></li><li><p>新建模块</p><p>这个模块为普通的javase模块</p><p>取名为servlet01</p></li><li><p>让该模块转变为javaee模块</p><p>右键该模块，add Framework support(添加框架支持)</p><p>添加javaee规范，选择web-application</p><p>选择该框架支持，idea会自动生成符合servlet规范的webapp目录情况</p><p>idea生成的web目录即使是webapp的根目录</p></li><li><p>编写servlet程序</p><p>class studentServlet implements Servlet（Servlet爆红，且无法导入包）</p><p>在project Sturcture处的Modules–&gt;Dependencies下点击加号，添加依赖</p><p>（+号中的library大概率的都是tomcat自带的lib中的jar包，选中此按钮为导入全部tomcat的lib中的jar包，或者可以同样点击+号选择jars or diectories 自行选择导入jar包</p><p>在学完maven以后，好像也是可以通过maven的坐标 版本号 score 的定义来导入jar包）</p></li><li><p>在servlet中编写业务代码（在此时连接数据库）</p></li><li><p>在WEB-INF的目录下新建子目录lib（名字固定，大小写固定）并且以此链接mysql驱动jar包</p><p>（感觉还是可以maven导入，目前还没试过）</p></li><li><p>在web.xml文件中完成studentServlet类的注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>studentServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>javaweb.servlet.studentServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>studentServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/servlet/student<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>给定一个html页面，在html页面中编写一个超链接，用户点击这个超链接，发送请求，tomcat执行后台的StudentServlet</p><p>该文件不能放置在WEB-INF 目录中</p><p>student.html文件的内容是</p><p><mark>a超链接处添加项目名称，此处为xmm</mark></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>student page<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--此处项目名使用的为xmm--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/xmm/servlet/student&quot;</span>&gt;</span>student list<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>让idea工具关联Tomcat(即将webapp部署到tomcat之中)</p><p>相应步骤在j大学专业课sp课程中开头已经学习过了，不再赘述</p><p>在弹出服务器设置参数中大多数不需要改动</p><p>在Deployment中部署webapp</p><p><mark>Application context为&#x2F;xmm   (xmm是在web,xml中取的项目名)</mark></p></li><li><p>在浏览器中打开，本次编写的网站为…&#x2F;xmm&#x2F;student.html</p></li></ol><h1 id="servlet对象的生命周期"><a href="#servlet对象的生命周期" class="headerlink" title="servlet对象的生命周期"></a>servlet对象的生命周期</h1><ul><li><p>什么是servlet的生命周期</p><p>一个servlet对象的出生到死亡的整个过程</p></li><li><p>servlet对象是由谁来进行维护 的？</p><p>servlet对象的创建 ，方法调用，对象的最终销毁1，javaweb程序员都是无权干涉的</p><p>servlet的生命周期是由tomcat（web server）全权负责 的</p><p>tomcat服务器通常我们又称为：web容器（web container）</p><p>由web容器来管理Servlet对象</p></li><li><p>注意！！我们自己new的Servlet对象只是一个普通的servlet对象，并不受web容器管理</p><p>web容器创建的servlet对象都会被放入一个集合中（HashMap）只有放置在容器中的servlet才会受到tomcat管理，自己创建的servlet对象不在该容器之中</p></li><li><p>默认情况下在服务器启动的时候，servlet对象并不会被实例化（合理的），在用户发送请求之前提前创建出的servlet是明显的浪费。</p><p>（可以通过设置空参构造进行确认）</p></li><li><p>若想实现启动服务器时，就创建servlet对象，可以在web.xml中增加以下标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">load-on--startup</span>&gt;</span><br></code></pre></td></tr></table></figure><p>中间的数字代表的是启动服务器时候创建servlet的顺序，越小优先级越高</p></li><li><p>用户在发送第一次请求的时候servlet对象被实例化（使用的是无参构造）</p><p>Aservlet对象被创建出来之后，tomcat服务器马上调用了Aservlet对象的无参构造</p><p><mark>无参数构造方法和init方法只会请求一次</mark></p><p>这说明，servlet对象是单实例，但是Servlet类不是单例模式，称为假单例（这是因为Servlet是tomcat创建的，与javaweb程序员无关）</p><p>并且每次发出申请，service就会执行一次</p></li><li><p>servlet的destroy方法只会被tomcat服务器调用一次，然后servlet对象就会被销毁</p><p>destroy方法执行的时候，实例对象还在，没有被销毁，当方法结束后servlet对象才会被销毁</p></li></ul><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><p>一般不建议程序员使用servlet不要去使用构造方法，因为可能导致无参构造方法消失，这个操作可能导致Servlet对象无法实例化</p><h1 id="通常在init方法中使用初始化"><a href="#通常在init方法中使用初始化" class="headerlink" title="通常在init方法中使用初始化"></a>通常在init方法中使用初始化</h1><h1 id="使用适配器"><a href="#使用适配器" class="headerlink" title="使用适配器"></a>使用适配器</h1><p>config是tomcat创建出来并且进行传递</p><h1 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h1><ul><li>servletconfig是servlet规范中的一员</li></ul><p>servletconfig是一个接口</p><p>？是谁去实现了这个接口？</p><ul><li><p>Tomcat服务器实现了ServletConfig接口</p></li><li><p>一个Servlet对象中就有一个ServletConfig对象，这俩对象是一对一的</p></li><li><p>ServletConfig对象是Tomcat服务器（WEB服务器）创建的，在Servlet创建的时候同时创建ServletConfig对象</p></li><li><p>ServletConfig的作用</p><p>configuration：配置，ServletConfig对象被翻译为Servlet对象的配置信息对象</p><p>ServletConfig对象中包装的信息是web.xml文件中<servlet></servlet>标签中的配置信息</p><p>tomcat解析web.xml文件，将web.xml文件中<servlet></servlet>标签中的信息自动包装到ServletConfig对象之中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInitParameter</span><span class="hljs-params">(String name)</span>;<span class="hljs-comment">//通过初始化参数的name,获取value</span><br><span class="hljs-keyword">public</span> Enumeration&lt;String&gt; <span class="hljs-title function_">getInitParameterNames</span><span class="hljs-params">()</span>;<span class="hljs-comment">//获取所有初始化的参数的name</span><br><span class="hljs-keyword">public</span> ServletContext <span class="hljs-title function_">getServletContext</span><span class="hljs-params">()</span>;<span class="hljs-comment">//获取ServletContext对象</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletName</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">//获取Servlet的名字</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="学不懂，他妈的"><a href="#学不懂，他妈的" class="headerlink" title="学不懂，他妈的"></a><mark>学不懂，他妈的</mark></h1><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><ul><li><p>什么是协议？</p><p>协议实际上是某些人或者某些组织提前制定好多的一套规范</p><p>协议就是一套规范，就是一套标准，由其他人或者组织进行制定</p></li><li><p>什么是HTTP协议？</p><p>http协议是W3C制定的一种超文本传输协议。</p><p>超文本是不仅支持传输普通字符串，</p><p>B和S之间相互传输数据需要遵循HTTP协议</p></li><li><p>什么是解耦合？</p><p>B和S之间不相互依赖</p><h1 id="HTTP的请求协议（B–-gt-S）"><a href="#HTTP的请求协议（B–-gt-S）" class="headerlink" title="HTTP的请求协议（B–&gt;S）"></a>HTTP的请求协议（B–&gt;S）</h1><p>HTTP的请求协议包括4部分</p><ul><li>请求行</li><li>请求头</li><li>空白行</li><li>请求体</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTTP">GET /servlet05/getServlet?username=jack&amp;userpwd=123 HTTP/1.1//请求行<br>//请求头（本身没有这个换行）<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Idea-75fd4672=73a4fda9-20c5-4f1a-9192-a68c6d64678a<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:8080/servlet05/index.html<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.55<br>//...<br></code></pre></td></tr></table></figure><p>&#96;</p></li></ul><h1 id="怎么发送GET和POST请求？"><a href="#怎么发送GET和POST请求？" class="headerlink" title="怎么发送GET和POST请求？"></a>怎么发送GET和POST请求？</h1><p>到目前为止，只有一种情况可以发送POST请求：使用form表单，并且form标签中的method属性值为：method&#x3D;“post”</p><p>其他所有情况一律都是get请求：</p><p>在浏览器地址栏上直接输入URL，回车，属于get请求。</p><p>在浏览器上直接点击超链接，属于get请求。</p><p>使用form表单提交数据时，没写method，默认就是get</p><p>或者使用form的时候，form标签中method属性值为：method&#x3D;“get”</p><h1 id="GET请求和POST请求怎么选择？"><a href="#GET请求和POST请求怎么选择？" class="headerlink" title="GET请求和POST请求怎么选择？"></a>GET请求和POST请求怎么选择？</h1><p>get请求比较适合从服务器端获取数据<br>post请求比较适合向服务器端传送数据<br>大部分的form表单提交，都是post方式<br>敏感信息用post请求<br>文件上传，一定是post请求<br>get请求和post请求发送的请求数据格式是统一的，只是位置不同</p><h1 id="后端和前端发送请求需要一致"><a href="#后端和前端发送请求需要一致" class="headerlink" title="后端和前端发送请求需要一致"></a>后端和前端发送请求需要一致</h1><p>避免405错误，doGet和doPost选择其一进行重写</p><p>不建议两种方法全部重写，405错误是有意义的</p><p>#一个Servlet类的开发步骤：</p><ol><li><p>编写一个Servlet类，直接对HttpServlet进行继承</p></li><li><p>重写doGet方法或者重写doPost方法，选择重写谁，由程序员决定</p></li><li><p>将Servlet类配置到web.xml文件之中</p></li><li><p>准备前端的页面（form表单），form表单中指定请求的路径即可</p></li></ol><h1 id="怎么选择web欢迎页面？"><a href="#怎么选择web欢迎页面？" class="headerlink" title="怎么选择web欢迎页面？"></a>怎么选择web欢迎页面？</h1><ol><li><p>在web.xml文件下配置以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>Login.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Login.html设置为所设置的web欢迎页面</p><p>web欢迎页面不需要以&#x2F;开头</p><p>如果所需要设置的web欢迎页面，是文件夹下的则所选取的file是</p><p>文件夹名&#x2F;..&#x2F;..&#x2F;Login.html</p><p>依旧不需要以&#x2F;开头，路径默认在web.app下进行寻找</p></li><li><p>webapp可以设置多个欢迎页面，靠上的优先级高，找不到的往下面找。</p></li><li><p>tomcat服务器已经提前配置文件好了index.xml的欢迎页面</p><p>即默认选择index.html,index.htm,index.jsp文件</p></li></ol><h1 id="关于WEB-INF目录"><a href="#关于WEB-INF目录" class="headerlink" title="关于WEB-INF目录"></a>关于WEB-INF目录</h1><p>在WEB-INF目录下面创建一个文件，</p><p><mark>WEB-INF目录下的文件是受到保护 </mark></p><h1 id="HttpServletRequest接口"><a href="#HttpServletRequest接口" class="headerlink" title="HttpServletRequest接口"></a>HttpServletRequest接口</h1><p>是Servlet规范中的一员</p><p>该接口 的父接口 是Servletrequest</p><p>HttpServletRequest对象是tomcat服务器负责创建的，这个对象中封装了HTTP的请求协议，</p><ul><li>实际上是用户发送请求的时候，遵循了HTTP协议，将HTTP协议中的信息以及数据全部解析出来，然后tomcat服务器把这些信息封装到HttpServletRequest对象之中，传给了javaweb程序员。</li><li>javaweb程序员面向HttpServletRequest接口编程，调用方法就可以就可以获得请求的信息了</li><li>request和response对象的生命周期？<ul><li>request对象和response对象，一个请求对象，一个响应对象，这俩对象只在当前请求 中有效（即是一次请求对应一个request，2次则对应2个）</li></ul></li></ul><h6 id="HTTPServletRequest接口中的常用方法"><a href="#HTTPServletRequest接口中的常用方法" class="headerlink" title="HTTPServletRequest接口中的常用方法"></a>HTTPServletRequest接口中的常用方法</h6><ul><li><p>怎么获取前端浏览器用户提交的数据？</p><ul><li>&#96;&#96;&#96;java<br>Map&lt;String,String[]&gt;getParameterMap()<br>&#x2F;&#x2F;这个是获取map<br>Enumertion<String>ggetParameterName()<br>&#x2F;&#x2F;这个是获取Map集合中所有的key<br>String[] getParameterValues(String name)<br>&#x2F;&#x2F;这是根据key获取Map集合中的value<br>String getParameter(Sring name)<br>&#x2F;&#x2F;获取value这个一维数组中的第一个元素，因为大多数value数组中只会有一个值，所以这个方法最常用<br>&#x2F;&#x2F;以上四个方法，和获取用户提交的数据有关系<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs processing"><br>  <br><br>- 前端提交的数据格式：username=abc&amp;userpwd=<span class="hljs-number">1234</span>&amp;hobby=s&amp;hobby=d<br><br>- 采用Map集合来存储：<br><br>  ```<span class="hljs-literal">null</span><br>  Map&lt;<span class="hljs-built_in">String</span>.<span class="hljs-property">String</span>&gt;<br>    <span class="hljs-built_in">key</span>存储<span class="hljs-built_in">String</span><br>    value存储<span class="hljs-built_in">String</span><br>    但这种方式是不对的<br>    因为如果采用以上的数据结构存储会发现<span class="hljs-built_in">key</span>重复的时候value覆盖，比如hobby=s，然后当下一条数据进入的时候hobby就会变成hobby=d,被覆盖了<br>    <span class="hljs-built_in">key</span>存储<span class="hljs-built_in">String</span><br>    value存储<span class="hljs-built_in">String</span>[]<br>    即<span class="hljs-built_in">key</span>使用单个，value使用数组进行存储<br>  <br></code></pre></td></tr></table></figure></li></ul></li><li><p>前端表单提交数据的时候，假设提交了数字，其实是以字符串的方式进行提交的，所以服务器端获得一定是一个字符串</p></li></ul><h1 id="应用域对象"><a href="#应用域对象" class="headerlink" title="应用域对象"></a>应用域对象</h1><p>ServletContext（Servlet上下文对象）是应用域对象</p><p>什么时候会考虑使用该应用域对象？</p><ul><li>第一：所有用户共享数据</li><li>第二：这个共享的数据量很小</li><li>第三：这个共享的数据很少进行修改操作</li><li>在以上3个条件都满足的时候，使用应用域对象，可以大大提升我们的程序的运行效率。</li><li>实际上向应用域中绑定数据，就相当于把数据放在了缓存之中。</li></ul><h3 id="已经见过的缓存技术？"><a href="#已经见过的缓存技术？" class="headerlink" title="已经见过的缓存技术？"></a>已经见过的缓存技术？</h3><ul><li>字符串常量池</li><li>整数型常量池</li><li>数据库连接池</li><li>线程池</li><li>后期还会学习，redis、mongoDB…</li></ul><p>ServletContext当中有三个操作域的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setAttribute</span><span class="hljs-params">(String name,Object obj)</span>;<span class="hljs-comment">//向域中绑定数据</span><br>Object <span class="hljs-title function_">getAttribute</span><span class="hljs-params">(String name)</span>;<span class="hljs-comment">//从域当中根据name获取数据</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeAttribute</span><span class="hljs-params">(String name)</span>;<span class="hljs-comment">//将域中绑定的数据进行删除</span><br><br><span class="hljs-comment">//以上的操作都是类似Map集合的操作</span><br>Map&lt;String,Object&gt;map；<br>map.put(<span class="hljs-string">&quot;name&quot;</span>,obj);<br></code></pre></td></tr></table></figure><h1 id="请求域对象"><a href="#请求域对象" class="headerlink" title="请求域对象"></a>请求域对象</h1><p>请求域只在应用域对象范围小很多</p><p>一个请求对象request对象对应一个应用域对象</p><p>能不能将AServlet和BServlet?</p><p>答案是可以的，使用Servlt当中请求转发机制。</p><h1 id="request对象的常用方法"><a href="#request对象的常用方法" class="headerlink" title="request对象的常用方法"></a>request对象的常用方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一步</span><br>request.getRequestDispather(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//参数填写路径，实际上就是把跳转的资源路径告知tomcat</span><br><span class="hljs-comment">//第二步</span><br>dispatcher.forward(request,respnse);<br></code></pre></td></tr></table></figure><ul><li><p>第一步：转发</p></li><li><p>第二步：调用转发器的forward方法进行跳转</p></li><li><p>第一步和第二步代码可以链接在一起</p><ul><li>&#96;&#96;&#96;java<br>request.getRequestDispatcher(“&#x2F;b”).forward(request,response);<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs less"><br><span class="hljs-selector-tag">-</span> 这样就可以保证<span class="hljs-selector-tag">A</span>和<span class="hljs-selector-tag">B</span>的<span class="hljs-selector-tag">servlet</span>中的<span class="hljs-selector-tag">request</span>和<span class="hljs-selector-tag">response</span>对象是同一个对象<br><br><span class="hljs-selector-tag">-</span> 俩个<span class="hljs-selector-tag">Servlet</span>怎么共享数据？<br><br>  <span class="hljs-selector-tag">-</span> 将数据放在<span class="hljs-selector-tag">ServletContext</span>应用域中，当然是可以的，但是占用资源过多，是不建议的<br>  <span class="hljs-selector-tag">-</span> 可以将数据放置在<span class="hljs-selector-tag">request</span>域中，然后由<span class="hljs-selector-tag">AServlet</span>转发给<span class="hljs-selector-tag">B</span>，并且保证<span class="hljs-selector-tag">A</span>和<span class="hljs-selector-tag">B</span>在同一次请求当中，这样就可以做到多个<span class="hljs-selector-tag">Servlet</span>共享同一份数据<br><br><span class="hljs-selector-tag">-</span> 转发的下一个资源必须是<span class="hljs-selector-tag">Servlet</span>吗？<br><br>  <span class="hljs-selector-tag">-</span> 不一定，只要是<span class="hljs-selector-tag">TOmcat</span>当中的合法资源，都是可以进行转发的，例如<span class="hljs-selector-tag">html</span>...<br>  <span class="hljs-selector-tag">-</span> 转发的时候，路径的写法要注意，转发的路径以/开始，不需要加上项目名.<br><br><span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">request</span>对象容易混淆的俩个方法：<br><br>  ```<span class="hljs-selector-tag">java</span><br>  <span class="hljs-comment">//有传入的username=zhangsan&amp;userpwd=123&amp;sex=1</span><br>  <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">getParameter</span>(<span class="hljs-string">&quot;name&quot;</span>)；<br>  <br>  <span class="hljs-comment">//之前一定执行过：request.setAttriibute(&quot;name&quot;,new Object());</span><br></code></pre></td></tr></table></figure></li></ul><p>这俩方法的区别是</p><ul><li><p>第一个方法从表格表单中获取用户提交的数据</p></li><li><p>第二个方法是获得请求域中绑定的数据</p><p>还有一个常见的方法是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">request.getRemoteAddr();<br><span class="hljs-comment">//获取客户端IP地址</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="HttpServletRequest接口的其他方法"><a href="#HttpServletRequest接口的其他方法" class="headerlink" title="HttpServletRequest接口的其他方法"></a>HttpServletRequest接口的其他方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">// 获取客户端的IP地址</span><br><span class="hljs-type">String</span> <span class="hljs-variable">remoteAddr</span> <span class="hljs-operator">=</span> request.getRemoteAddr();<br><br><span class="hljs-comment">// 设置请求体的字符集（处理POST请求的乱码问题，不能解决get请求的乱码问题）</span><br>request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br><span class="hljs-comment">// Tomcat9和9以前，解决响应乱码</span><br>response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br><span class="hljs-comment">// get请求乱码怎么解决</span><br><span class="hljs-comment">// 方案：修改CATALINA_HOME/conf/server.xml配置文件</span><br>&lt;Connector URIEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br><span class="hljs-comment">// 注意：从Tomcat8之后，URIEncoding的默认值就是UTF-8，所以GET请求也没有乱码问题了。</span><br>    <br><span class="hljs-comment">// 获取应用的根路径</span><br><span class="hljs-type">String</span> <span class="hljs-variable">contextPath</span> <span class="hljs-operator">=</span> request.getContextPath();<br><br><span class="hljs-comment">// 获取请求方式</span><br><span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br><br><span class="hljs-comment">// 获取请求的URI</span><br><span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getRequestURI();  <span class="hljs-comment">// /aaa/testRequest</span><br><br><span class="hljs-comment">// 获取servlet path</span><br><span class="hljs-type">String</span> <span class="hljs-variable">servletPath</span> <span class="hljs-operator">=</span> request.getServletPath(); <span class="hljs-comment">//   /testRequest</span><br></code></pre></td></tr></table></figure><h1 id="莫名其妙上课学会的新方法！！！"><a href="#莫名其妙上课学会的新方法！！！" class="headerlink" title="莫名其妙上课学会的新方法！！！"></a>莫名其妙上课学会的新方法！！！</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">newStr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<br>            userName1.getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>),<br>            <span class="hljs-string">&quot;UTF-8&quot;</span><br>    );<br><span class="hljs-comment">//也能解决request传来的String中文乱码错误</span><br></code></pre></td></tr></table></figure><h1 id="使用纯Servlet做一个单表的CRUD操作（OA）"><a href="#使用纯Servlet做一个单表的CRUD操作（OA）" class="headerlink" title="使用纯Servlet做一个单表的CRUD操作（OA）"></a>使用纯Servlet做一个单表的CRUD操作（OA）</h1><ul><li><p>使用纯粹的Servlet完成单表的增删改查</p></li><li><p>实现步骤</p><ul><li><p>第一步：准备一张数据库表</p></li><li><p>第二步准备一套HTML页面（项目原型）</p><ul><li>欢迎页面：index.html</li><li>列表页面：list.html(以列表页面为核心，展开其他页面)</li><li>新增页面：add.html</li><li>修改页面：edit.html</li><li>详情页面：detail.html</li></ul></li><li><p>第三步：确定需要哪些功能？</p><p>只要这个操作链接了数据库，该操作就叫做功能</p><ul><li><p>查看部门列表</p></li><li><p>新增部门</p></li><li><p>查看部门信息</p></li><li><p>删除部门</p></li><li><p>跳转到修改页面</p></li><li><p>修改部门</p></li></ul></li><li><p>第四步：在idea中搭建开发环境</p><ul><li><p>创建一个webapp（导入各种奇怪的jar包）</p></li><li><p>向webapp中添加连接数据库的jar包（mysql驱动）</p><ul><li>必须在WEB-INF目录下新建lib目录，然后将mysql的驱动jar包拷贝到这个目录下，该目录必须叫做lib（全部小写）</li></ul></li><li><p>JDBC的工具类（未来会使用mybatis）</p></li></ul></li><li><p>第五步：实现查看部门列表功能</p><ul><li><p>实现功能最好从前端一步步往后端写，或者从后端一步步往前端写，切忌想到什么写什么</p><p>即写代码的过程最好是程序执行的过程，这样可以尽量避免出现错误</p></li><li><p>假设从前端开始：</p></li><li><p>第一：先修改前端超链接，用户从这里开始操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/oa/dept/list&quot;</span>&gt;</span>查看部门列表<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>//从项目名开始写<br></code></pre></td></tr></table></figure></li><li><p>第二：编写web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>list<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>top.xgfm737.oa.DeptListServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>list<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--web.xml文件的路径也是/开头，但是不需要加项目名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/dept/list<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>第三：编写DeptListServlet类继承HttpServlet类，然后重写doGet方法。</p><p>注：因为超链接是get请求（我才知道，我是fw）</p></li><li><p>第四：在DeptListServlet类的doget方法中连接数据库，查询部门，并且动态的进行输出</p></li></ul></li><li><p>第六步：实现详情功能（查看部门详情）</p><ul><li><p>建议从前端往后端一步步进行实现</p></li><li><p>找到所点击的详情在哪，连接数据库然后执行代码</p></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String contextPath=request.getContextPath();<br></code></pre></td></tr></table></figure><p>获取根路径</p><p>向服务器提交数据的格式：url?name&#x3D;value&amp;name&#x3D;value</p></li><li><p>配置web.xml文件</p></li><li><p>&#96;&#96;&#96;xml</p><servlet>        <servlet-name>detail</servlet-name>        <servlet-class>top.xgfm737.oa.web.action.DeptDetailServlet</servlet-class>    </servlet>    <servlet-mapping>        <servlet-name>detail</servlet-name>        <!--web.xml文件的路径也是/开头，但是不需要加项目名-->        <url-pattern>/dept/detail</url-pattern>    </servlet-mapping><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-code">      </span><br><span class="hljs-code"></span><br><span class="hljs-bullet">    -</span> 编写一个DeptDetailServlet类，重写doget方法<br><br><span class="hljs-bullet">    -</span> 获取部门编号等动态输出<br><br><span class="hljs-bullet">  -</span> 第七步：删除部门<br><br><span class="hljs-bullet">    -</span> 使用js脚本加入到deptListServlet之中<br><span class="hljs-bullet">    -</span> 再发送相对应的get请求，启动DeptDeleteServlet，然后删除相应数据，在成功后跳转回主界面，如果失败，则跳转至error页面<br><br><span class="hljs-bullet">  -</span> 第八步：新增部门<br><br><span class="hljs-bullet">    -</span> 在新增部门添加超链接至add.html，并在该页面中通过form表单的post传递数据给DeptAddServlet页面，然后成功实现跳转回到主界面，如果失败则跳转至error页面<br><br><span class="hljs-code">    注意，第七步第八步建议开始事务步骤，通过回滚事务来避免数据的错误</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">  -</span> 第九步：修改部门<br><br><span class="hljs-bullet">    -</span> 在修改页面获取到想要修改的部门的信息，在文本框中输出，然后修改<br><span class="hljs-bullet">    -</span> 在表单修改后的信息通过post请求发送到DeptModifyServlet处<br><span class="hljs-bullet">    -</span> 然后在DeptModifyServlet中运行，方法类似增加部门，只是修改sql语句<br><span class="hljs-bullet">    -</span> 然后成功和失败的跳转<br><br><span class="hljs-section"># 重定向和请求分派（转发）</span><br><br><span class="hljs-bullet">-</span> 代码！<br><br><span class="hljs-bullet">  -</span> 转发<br><br><span class="hljs-code">    ```java</span><br><span class="hljs-code">    request.getRequestDispatcher(&quot;/dept/list&quot;).forward(request,response);</span><br><span class="hljs-code">    //转发是一次请求，</span><br><span class="hljs-code">    //无论转发多少次，显示的都是第一次的Servlet的地址</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>重定向</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">response.send<span class="hljs-constructor">Tedirect(“<span class="hljs-params">oa</span><span class="hljs-operator">/</span><span class="hljs-params">dept</span><span class="hljs-operator">/</span><span class="hljs-params">list</span>”)</span>;<br></code></pre></td></tr></table></figure><p>发送两次请求，每次重定向都会重新发送请求</p></li><li><p>转发是由WEB服务器来控制的，A资源跳转到B资源，这些跳转动作是Tomcat 服务器内部完成的</p></li><li><p>重定向是由浏览器完成的，具体跳转到哪个资源，是浏览器说了算的</p></li></ul></li><li><p>转发和重定向应该如何选择？什么时候使用转发，什么时候使用重定向？</p></li></ul><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>在开发中一般使用注解和web.xml双开发</p><p>比如@WebServlet，WebServlet注解中有哪些属性？</p><ul><li>name属性：使用指定的Servlet的名字，等同于&lt;servlet -name&gt;</li><li>urlpatterns属性：用来指定Servlet的映射路径。可以指定多个路径</li><li>loadonstartup属性：用来指定在服务器启动阶段是否加载该Servlet,等用于<load-on-startup></li></ul><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>JSP实际上就是一个Servlet，index.jsp访问时候，会自动翻译生成index.jsp.java，该类继承HttpJspBase，而HttpJspBase类继承的是HttpServlet,所以说jsp实际上就是一个Servlet类</p><p>而JSP的生命周期与Servlet的生命周期完全相同，没有任何区别。</p><p>jsp和Servlet都是单例（假单例）</p><ul><li>JSP第一次访问的时候是比较慢的，因为需要先编译JSP文件</li><li>执行顺序为：<ul><li>jsp文件翻译为java源文件</li><li>java源文件编译生成class字节码文件</li><li>通过class去创建servlet对象</li><li>调用servlet中的init方法</li><li>最后调用servlet对象中的service方法</li></ul></li><li>JSP是什么<ul><li>jsp是java程序</li><li>jsp是JavaServer Page的缩写</li><li>Servlet是JavaEE的13个规范 </li><li>所以JSP也是一套规范</li></ul></li><li>对JSP进行错误调试的时候，还是要直接打开JSP文件对应的java文件，检查java代码</li></ul><h1 id="JSP基础语法"><a href="#JSP基础语法" class="headerlink" title="JSP基础语法"></a>JSP基础语法</h1><ul><li><p>&lt;%java语句%&gt;</p><ul><li><p>是在方法体中写代码</p></li><li><p>service方法中编写的代码是有顺序的，是逐行执行的（从上至下进行运作）</p></li></ul></li><li><p>&lt;%–JSP的注释，并且不会被翻译到翻译到java源代码之中–%&gt;</p></li><li><p>&lt;%! 声明 %&gt;</p><ul><li>可以是全是变量，也可以是静态方法等等</li></ul></li><li><p>&lt;%&#x3D;输出在浏览器上的数据%&gt;</p><ul><li>该语句等同于out.print();</li></ul></li></ul><h1 id="JSP和Servlet的区别"><a href="#JSP和Servlet的区别" class="headerlink" title="JSP和Servlet的区别"></a>JSP和Servlet的区别</h1><p>jsp和Serlvet本质是一致的</p><p>但是jsp是用于展示数据</p><p>Servlet是用于收集数据</p><h1 id="使用JSP优化OA"><a href="#使用JSP优化OA" class="headerlink" title="使用JSP优化OA"></a>使用JSP优化OA</h1><ul><li><p>优化list页面</p><ul><li>使用jsp展示前端页面</li></ul></li><li><p>在servlet中使用JDBC获取结果集RS</p><ul><li>编写JavaBean，编写相应的方法</li></ul></li><li><p>在servlet中将rs存入所编写的JavaBean（Dept）集合(Depts)中</p><ul><li>使用request.setAttribute(String name,Object obj);存入该集合</li></ul></li><li><p>然后在servlet中转发到jsp页面</p><ul><li>在jsp页面中用getAttribute(String name);方法，并且用集合类型接住</li></ul></li><li><p>然后在jsp中通过while循环输出</p></li><li><p>优化add</p></li><li><p>优化！！！</p></li></ul><h1 id="当前的OA存在的问题"><a href="#当前的OA存在的问题" class="headerlink" title="当前的OA存在的问题"></a>当前的OA存在的问题</h1><p>任何用户都可以访问，这是不安全的</p><p>所以我们要添加一个用户登录</p><ul><li>步骤1 ：数据库中添加一个用户数据表</li><li>步骤2：实现登录页面</li></ul><h1 id="session对象（会话）"><a href="#session对象（会话）" class="headerlink" title="session对象（会话）"></a>session对象（会话）</h1><p>什么是会话？</p><ul><li>从打开浏览器到关闭，生成一次会话</li></ul><p>一个用户拥有一个独立的session对象，用cookie进行标记</p><p>request&lt;session&lt;application</p><ul><li>session具有超时机制，超过多少时间session没有被访问，那么该session将会被删除</li><li>session对象是存储在服务器端的，一个session包括多个请求。</li></ul><h1 id="session的实现原理"><a href="#session的实现原理" class="headerlink" title="session的实现原理"></a>session的实现原理</h1><p>在web服务器中有一个session列表，存储相对于的map集合，在map集合中存储的key是sessionID</p><ul><li><strong>第一次发送请求</strong>的时候，服务器会创建一个新的session对象，同时给session对象生成一个id，然后存储到web服务器中。</li><li><strong>第二次发送请求和在session未销毁的之前发送请求</strong>的时候，会将浏览器缓存中的sessionid自动发送给服务器，服务器获取到sessionid，然后在session列表中寻找相对应的session对象</li></ul><p>一次会话包涵完整的session对象的生命周期。</p><p>session对象的销毁是依靠超时机制和手动销毁的</p><ul><li>因为tomcat无法知道你是否关闭浏览器（因为HTTP协议是无状态协议）</li></ul><p>JSESSIONID&#x3D;xxxxxxxxxx 是以cookie的形似存储在浏览器之中的，浏览器只要关闭，这个cookie就会关闭，内存就会消失，会话等同消失。</p><h1 id="cookie禁用"><a href="#cookie禁用" class="headerlink" title="cookie禁用"></a>cookie禁用</h1><p>如果禁用cookie(即服务器拒收cookie)，每次访问（发送请求）的时候都会生成一个全新的session和与之对应的cookie，之前的cookie和session都会消失，然后因为会话超时消失。</p><p>session默认超时时间为30分钟</p><p>如果cookie禁用，session机制还能使用？</p><p>可以，需要使用URL重写机制</p><ul><li><p>该机制会严重提高开发者的成本，给开发带来了很大的难度，极大的成本，每个超链接后面都要加上url路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>/test/session;jsessionid=XXXXXXXXXXXX<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="用户登录功能有效化"><a href="#用户登录功能有效化" class="headerlink" title="用户登录功能有效化"></a>用户登录功能有效化</h1><p>将用户信息加入到session中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span>request.getSession(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">//参数使用false的话，未找到session不会去创建session</span><br><span class="hljs-comment">//如果之前并没有创建过session对象，参数最好填写true，不然在setAttribute处容易导致空指针异常</span><br><span class="hljs-comment">//(登录成功后放入session)</span><br>session.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username);<br><br><span class="hljs-comment">//在deptServlet之中添加一个if判断，session中有登录信息就允许跳转，否则一律跳转至login页面</span><br></code></pre></td></tr></table></figure><p>在退出登录的servlet下添加销毁session对象的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">session.invalidate();<br></code></pre></td></tr></table></figure><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>session的实现原理中，每个session对象都关联一个sessionid</p><p>JSESSIONID的键值对数据其实就是cookie对象</p><p>对于ssesion关联的cookie来说，这个cookie是被保存在浏览器的运行内存中的</p><p>只要浏览器不关闭，用户再次发送请求的时候，会自动将运行内存中的cookie发送给服务器</p><p>cookie最终保存在浏览器客户端上</p><ul><li>可以保存在运行内存中（浏览器关闭后cooki就消失了）</li><li>也可以保存在硬盘文件中（永久保存）</li></ul><p>cookie有啥用呢？</p><ul><li>cookie何session机制其实都是为了保存会话的状态</li><li>cookie是将会话的状态保存在浏览器上</li></ul><p>如果cookie清除，那么所有的记录也会跟着消失</p><ul><li>登录前的数据存储在cookie上，而登录后的各种数据存储在数据库中</li></ul><p>十天内免登录：</p><p>该功能也是需要cookie来进行实现的，并且同时选择十天内免登录，登录成功后，浏览器客户端会保存一个cookie，这个cookie保存快来用户名和密码，并且该cookie是保存在硬盘文件当中的，十天有效，在十天内用户再次访问网站的时候，浏览器自动提交cookie给服务器，然后验证，登录</p><p>cookie和session机制都是http协议的机制，并不是Java的机制</p><h1 id="java的servlet，对cookie提供了哪些支持？"><a href="#java的servlet，对cookie提供了哪些支持？" class="headerlink" title="java的servlet，对cookie提供了哪些支持？"></a>java的servlet，对cookie提供了哪些支持？</h1><p>提供了javax.servlet.http.Cookie</p><p>cookie在HTTP协议中是这么规定 ：当浏览器发送请求的时候，会自动携带该path下的cookie</p><ul><li><p>cookie的有效时间</p><p>cookie。setMaxAge(60*60)；设置cookie在一小时后关闭</p></li><li><p>没有设置有效时间，则默认存储在浏览器的运行内存之中，浏览器关闭则cookie消失</p></li><li><p>只要cookie的有效时间&gt;0，这个cookie一定会存储到硬盘文件当中</p></li><li><p>cookie的有效时间为0，表示该cookie被删除，主要用在删除浏览器中的同名cookie</p></li><li><p>cookie的有效期&lt;0，那么该cookie不会被存储在硬盘文件当中，存储在运行内存当中，和不使用setMaxAge是一个效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;productid&quot;</span>,<span class="hljs-string">&quot;13572468&quot;</span>);<span class="hljs-comment">//创建cookie</span><br>cookie.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>);<span class="hljs-comment">//设置cookie的有效时间(秒)</span><br>cookie.setPath(“/servlet13”);<span class="hljs-comment">//手动设置cookie的path</span><br>response.addCookie(cookie);<span class="hljs-comment">//向浏览器发送cookie</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = request.getCookies(); <span class="hljs-comment">// 这个方法可能返回null</span><br><span class="hljs-keyword">if</span>(cookies != <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">for</span>(Cookie cookie : cookies)&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cookie.getName();<br><span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> cookie.getValue();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JSP九大内置对象"><a href="#JSP九大内置对象" class="headerlink" title="JSP九大内置对象"></a>JSP九大内置对象</h1><p>JSP为了方便使用，在加载时就创建九大内置对象</p><p><mark>九大内置对象：request、response、session、application、page、pageContext、out、config、exception</mark></p><p>pageContext&lt;request&lt;session&lt;application</p><p>以上四个作用域都有：setAttribute,getAttribute,removeAttribute方法</p><p>以上四个作用域的使用原则是尽量使用小的域</p><ol><li><h6 id="request对象（请求作用域）"><a href="#request对象（请求作用域）" class="headerlink" title="request对象（请求作用域）"></a>request对象（请求作用域）</h6></li><li><h6 id="session对象（会话作用域）"><a href="#session对象（会话作用域）" class="headerlink" title="session对象（会话作用域）"></a>session对象（会话作用域）</h6></li><li><h6 id="application对象（应用作用域）"><a href="#application对象（应用作用域）" class="headerlink" title="application对象（应用作用域）"></a>application对象（应用作用域）</h6></li><li><h6 id="pageContext对象（页面作用域）"><a href="#pageContext对象（页面作用域）" class="headerlink" title="pageContext对象（页面作用域）"></a>pageContext对象（页面作用域）</h6></li><li><h6 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h6></li><li><h6 id="out对象"><a href="#out对象" class="headerlink" title="out对象"></a>out对象</h6></li><li><h6 id="page对象（其实就是this，当前的servlet）"><a href="#page对象（其实就是this，当前的servlet）" class="headerlink" title="page对象（其实就是this，当前的servlet）"></a>page对象（其实就是this，当前的servlet）</h6></li><li><h6 id="config对象"><a href="#config对象" class="headerlink" title="config对象"></a>config对象</h6></li><li><h6 id="exception对象"><a href="#exception对象" class="headerlink" title="exception对象"></a>exception对象</h6></li></ol><h1 id="JSP四大作用域"><a href="#JSP四大作用域" class="headerlink" title="JSP四大作用域"></a>JSP四大作用域</h1><p><mark>四大作用域：pageContext、request、session、application</mark></p><h1 id="JSP的指令"><a href="#JSP的指令" class="headerlink" title="JSP的指令"></a>JSP的指令</h1><p>指令的作用是指导当前jsp翻译引擎工作</p><p>JSP指令</p><ul><li>include指令：包含指令</li><li>taglib指令：引入标签库指令，与JSTL标签库息息相关</li><li>page指令：</li></ul><p>指令的使用语法</p><p>&lt;%@指令名 属性名&#x3D;属性值 属性名&#x3D;属性值 属性名&#x3D;属性值 ……%&gt;</p><p>关于page指令的常用属性</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%page session=<span class="hljs-string">&quot;true|false&quot;</span>%&gt;<br><span class="hljs-comment">//true or false表示是否启用JSP的内置对象session</span><br><span class="hljs-comment">//该指令的默认值是true</span><br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> contentType=<span class="hljs-string">&quot;text/json&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>contentType属性是用来设置响应的内容类型，内容也可以是“text/html<span class="hljs-string">&quot;</span><br><span class="hljs-string">pageEncoding用力啊设置响应时采用的字符集</span><br><span class="hljs-string">//说实话感觉都是默认的属性，没必要进行修改</span><br><span class="hljs-string">&lt;%@page contentType=&quot;</span>text/json;charset=UTF-<span class="hljs-number">8</span><span class="hljs-string">&quot;%&gt;</span><br><span class="hljs-string">//这样就是同时设置，将2个page指令合并，效果是一致的</span><br><span class="hljs-string">&lt;%@page import=&quot;</span><span class="hljs-string">&quot;%&gt;</span><br><span class="hljs-string">//import导包，和java中的import导包效果一模一样</span><br><span class="hljs-string">&lt;%@page errorpage=&quot;</span>/error.jsp<span class="hljs-string">&quot;%&gt;</span><br><span class="hljs-string">//出现错误之后，跳转至error.jsp页面，设置错误跳转页面</span><br><span class="hljs-string">&lt;%@page isErrorPage=&quot;</span><span class="hljs-literal">true</span><span class="hljs-string">&quot;%&gt;</span><br><span class="hljs-string">//这个是errorpage是否的判定。与errorpage配套使用</span><br><span class="hljs-string">//同时这也是表明启用JSP的九大内置对象</span><br><span class="hljs-string">&lt;%</span><br><span class="hljs-string">exception.printStackTrace();</span><br><span class="hljs-string">%&gt;</span><br><span class="hljs-string">//exception是jsp的九大内置对象，通过这个语句打印异常栈信息，输出到后台控制台，也是与errorpage和isErrorPage配套使用的</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h1><p>EL表达式的作用</p><ul><li><p>Expression Language(表达式语言)</p></li><li><p>EL表达式可以替代JSP中的java代码，让JSP文件中的程序看起来更加整洁，美观</p></li><li><p>JSP代码中夹杂着各种java代码导致JSP文件很混乱（后来通过前后端分离解决）</p></li><li><p>EL表达式可以算是JSP语法的一部分，EL表达式归属于JSP</p></li><li><p>EL表达式出现在JSP中主要是：</p><ul><li><p>从某个域中取出数据</p><p>四个域</p><ul><li><p>pageContext</p></li><li><p>session</p></li><li><p>request</p></li><li><p>application</p></li></ul></li><li><p>将取出的数据转换成字符串</p></li><li><p>将字符串输出到浏览器</p></li></ul></li><li><p>EL表达式十分简便，基本语法格式：</p><p>${}</p><p>举例：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>request.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>%&gt;<br><br><span class="hljs-comment">//该输出语句可以替换为下面的EL表达式</span><br>&lt;%=requst.getAttribute(<span class="hljs-string">&quot;username&quot;</span>)%&gt;<br><br><br><span class="hljs-comment">//与之等效的EL表达式是这样的</span><br>$&#123;username&#125;<br></code></pre></td></tr></table></figure></li><li><p>EL表达式的使用</p><p>数据需要存储到4大范围之一</p><p>然后使用EL表达式获取</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsp"><span class="hljs-comment">//首先需要编写User类</span><br>&lt;%<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">user</span>();<br>user.setUsername(<span class="hljs-string">&quot;123&quot;</span>);<br>user.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>user.setAge(<span class="hljs-number">123</span>);<br>session.setAttribute(<span class="hljs-string">&quot;userObj&quot;</span>,user);<br>%&gt;<br><span class="hljs-comment">//&#123;&#125;中写存储到域对象中的name,并且千万不要使用双引号，这会导致直接输出该字符串</span><br>$&#123;userObj&#125;<br><span class="hljs-comment">//输出该实体对象的地址</span><br><br>$&#123;userObj.name&#125;<br><span class="hljs-comment">//输出user的name:123</span><br><span class="hljs-comment">//该输出需要有相互对应的get方法</span><br><br>$&#123;userObj[<span class="hljs-string">&quot;name&quot;</span>]&#125;<br><span class="hljs-comment">//这样写与上一个等效</span><br><span class="hljs-comment">//[]里面如果没有双引号会将其看做变量，如果是带双引号的，则回去userObj的数据中寻找name属性</span><br><br>$&#123;abc&#125;<br><span class="hljs-comment">//输出存储到域对象中name为abc的数据</span><br>$&#123;<span class="hljs-string">&quot;abc&quot;</span>&#125;<br><span class="hljs-comment">//输出abc</span><br></code></pre></td></tr></table></figure></li><li><p>如果四个作用域中有重名的存储数据，根据应用域优先级从小到大取出数据</p></li><li><p>如果不想逆优先级取出数据可以使用如下代码</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;pageScope.data&#125;<br>$&#123;requestScope.data&#125;<br>$&#123;sessionScope.data&#125;<br>$&#123;applicationScope.data&#125;<br></code></pre></td></tr></table></figure><p>实际开发时，存储的name尽量不要重复，极容易导致获取的数据出现问题，所以xxxScope都是可以省略的</p></li><li><p>EL表达式如果从四个域中都找不到name对应的数据，会什么也不显示，这样比较友好</p></li><li><p>${user[“”]}</p><p>这个中间的中括号可以有效的避免user的名字中间带.号的时候，避免识别错误</p><p>数据实体对象带点</p><p>比如${user.a.abc}</p><p>这样是无法取值的</p></li><li><p>掌握EL表达式，怎么从Map集合中取数据：</p></li><li><p>掌握EL表达式，从数组中获取数据：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">String[] user=&#123;....&#125;;<br>request.setAttribute(<span class="hljs-string">&quot;nameArray&quot;</span>,user);<br><br>$&#123;nameArray[index]&#125;<br><span class="hljs-comment">//并且此处的index不会触发数组索引越界异常，十分高效</span><br></code></pre></td></tr></table></figure></li><li><p><mark>EL表达式严禁{}中有多个.号，这会导致读不出数据</mark></p></li><li><p>EL表达式中的pageContext对象是隐式的对象，pageContext</p></li><li><p>并且request.getContextPath</p><p>可以在EL表达式中写pageContext.request.contextPath</p></li></ul><p>关于EL表达式的运算符</p><ol><li><p>算术运算符</p><p>+-*&#x2F;%</p></li><li><p>关系运算符</p><p>&#x3D;&#x3D;  !&#x3D;  &gt; &gt;&#x3D; &lt;  &lt;&#x3D;  eq</p></li><li><p>逻辑运算符</p><p>!   &amp;&amp;   ||   not and  or</p></li><li><p>取值运算符</p><p>[]   .</p></li><li><p>empty运算符</p></li></ol><p>算数运算符</p><ul><li><p>＋号只能加做为运算符，不能作为字符串拼接</p></li><li><p>如果是强行加上字符串，会报500错，数字格式化异常</p></li></ul><p>关系运算符</p><ul><li><p>只能出现在el表达式</p></li><li><p>EL表达式中其他的隐式对象： </p></li><li><ul><li><ul><li>pageContext</li></ul></li></ul></li><li><ul><li><ul><li>param</li></ul></li></ul></li><li><ul><li><ul><li>paramValues</li></ul></li></ul></li><li><ul><li><ul><li>initParam</li></ul></li></ul></li><li><p>empty运算符的结果是Boolean类型的</p></li></ul><h1 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h1><ul><li><p>什么JSTL标签库？</p><ul><li>Java Standard Tag Lib(java标准标签库)</li><li>JSTL标签库通常和EL表达式一起使用，目的是让JSP中的java代码消失</li></ul></li><li><p>使用JSTL标签库的步骤</p><ol><li><p>引入JSTL标签库对应的jar包</p></li><li><p>在idea中如何引入</p><p>新建lib目录然后add as lib</p><p>一定是要和mysql数据库jar包一样</p><p>或者可以使用maven导入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用tablib指令引入标签库</p><p>JSTL提供了很多种标签，你要引入哪个标签需要自己选择，重点掌握核心标签库！</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@taglib</span> prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;<br><br><span class="hljs-comment">//prefix=  这里写什么都可以，一般都写c</span><br>别的有的用fmt，sql  一般都是首字母这样的进行取名<br></code></pre></td></tr></table></figure></li><li><p>在需要使用标签的位置使用。表面使用的是标签，底层实际上还是java代码</p></li><li><p>JSTL标签的原理</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;%@tablib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.su.com/jsp/jstl/core&quot;</span>%&gt;<br><span class="hljs-regexp">//</span>以上uri后面的路径实际上指向了一个xxxt.tld文件<br><span class="hljs-regexp">//</span>tld文件实际上是一个xml配置文件<br><span class="hljs-regexp">//</span>在tld文件中描述了标签和java类之间的关系<br><span class="hljs-regexp">//</span>在以上核心标签库对应的tld文件是c.tld文件<br><span class="hljs-regexp">//</span>存在jar包的META-INF目录下<br></code></pre></td></tr></table></figure></li></ol></li><li><p>core举例</p><ul><li>if标签</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$&#123;status==1&#125;&quot;</span>&gt;</span><br>启动<br><span class="hljs-tag">&lt;/<span class="hljs-name">c</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test中添加if判断，如果test判断为正，输出C标签中的东西</p><ul><li><p>foreach标签</p><p>相当于for循环</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&quot;$&#123;brands&#125;&quot;</span> <span class="hljs-attr">var</span> =<span class="hljs-string">&quot;brand&quot;</span>&gt;</span><br>$&#123;brand.id&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>$&#123;brand.brandName&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>$&#123;brand.companyName&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>$&#123;brand.description&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">c</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>items：被遍历的容器</li><li>var：被遍历的临时变量</li><li>begin:开始数</li><li>end:结束数</li><li>step:步长</li></ul></li></ul><h1 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h1><p>各种servlet都是执行自己的业务这些servlet执行前都要判断用户是否要登录，如果用户登录了，可以继续操作，如果没有登录，需要用户登录，而这步骤很多时候都重复的，显然代码没有得到重复利用</p><p>这时候就需要用到过滤器了</p><p>我们可以使用过滤器来添加过滤代码，这个过滤代码可以添加到Servlet执行前，或者之后进行过滤。Servlet和Filter实际上也都是java程序</p><p>过滤器和用户的请求路径相关，目的也就是提升复用性</p><p>目标Servlet是否执行，取决于两个条件：</p><p>第一：过滤器是否编写chian.doFilter(request,response);</p><p>第二：用户请求路径是否和Servlet的请求路径一致</p><p>chain.doFilter(requset,response);这行代码的作用是：</p><ul><li>执行下一个过滤器，如果下面没有过滤器，那么就执行最终的Servlet</li><li>注意：Filter的优先级，天生就比Servlet的优先级高</li><li>&#x2F;a.do对应一个Filter也会对应一个Servlet，那么一定是先执行Filter,再执行Servlet</li></ul><p>关于Filter的配置路径：</p><ul><li>&#x2F;a.do、&#x2F;b.do、&#x2F;dept&#x2F;save  这些配置方式都是精确匹配</li><li>&#x2F;*匹配所有路径</li><li>*.do 匹配后缀，不需要以&#x2F;开始</li><li>&#x2F;dept&#x2F;*  匹配前缀</li></ul><p>在web.xml文件中进行配置的时候，Filter的执行顺序是什么？</p><ul><li>依靠filter -mapping标签的配置位置，越靠上优先级越高</li></ul><p> 过滤器的调用顺序，遵循栈数据结构</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.Filter2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>filter2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用webFilter的时候，filter的执行顺序是什么样的呢？</p><ul><li>执行顺序是比较Filter的类名</li><li>比如:FilterA和FilterB，则先执行FilterA</li><li>比如：Filter1和Filter2，则先执行Filter1</li></ul><p>Filter的生命周期</p><ul><li>和Servlet对象的生命周期一致，唯一的区别就是Filter会在tomcat启动时候实例化</li></ul><p>Filter过滤器这里有一个设计模式：</p><ul><li>责任链设计模式</li><li>优点可以在程序运行阶段，动态的修改web.xml文件，动态的组合程序的调用程序</li></ul><p>在编译阶段已经完全确定了调用关系。</p><ul><li>如果你想改变他们的调用顺序，必须修改以下java源代码。</li><li>java代码修改，需要重新编译，项目需要重新测试，项目需要重新发布。这是一个繁琐的过程。</li><li>显然，这种设计违背了：OCP原则。（开闭原则）<ul><li></li></ul></li><li>开闭原则：对扩展开放，对修改关闭。</li><li>对项目扩展我没有意见，但是你扩展的过程中如果修改了我之前写好的代码，这就是你的不对了。</li><li>最好要达到的效果是，可以扩展，但是最好别改我之前写好的代码。</li></ul><p>责任链设计模式：</p><ul><li>在程序运行阶段，动态的调整程序的运行顺序，过滤器一般配置在xml中，因为这个能够更好地进行改动</li></ul><h1 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h1><ul><li><p>什么是监听器？ </p><p>监听器是Servlet规范中的一员。就像Filter一样。Filter也是Servlet规范中的一员。</p><p>在Servlet中，所有的监听器接口都是以“Listener”结尾。</p></li><li><p>监听器有什么用？ </p><p>监听器实际上是Servlet规范留给我们javaweb程序员的特殊时机。</p><p>特殊的时刻如果想执行这段代码，你需要想到使用对应的监听器。</p></li><li><p>Servlet规范中提供了哪些监听器？ </p><p>jakarta.servlet包下： </p><p>ServletContextListener</p><p>ServletContextAttributeListener</p><p>ServletRequestListener</p><p>ServletRequestAttributeListener</p></li><li><p>jakarta.servlet.http包下： </p><p>HttpSessionListener</p><p>HttpSessionAttributeListener </p><ul><li><p>该监听器需要使用@WebListener注解进行标注。</p></li><li><p>该监听器监听的是什么？是session域中数据的变化。只要数据变化，则执行相应的方法。主要监测点在session域对象上。</p></li></ul><p>HttpSessionBindingListener </p><ul><li><p>该监听器不需要使用@WebListener进行标注。</p></li><li><p>假设User类实现了该监听器，那么User对象在被放入session的时候触发bind事件，User对象从session中删除的时候，触发unbind事件。</p></li><li><p>假设Customer类没有实现该监听器，那么Customer对象放入session或者从session删除的时候，不会触发bind和unbind事件。</p></li></ul><p>HttpSessionIdListener </p><ul><li>session的id发生改变的时候，监听器中的唯一一个方法就会被调用。</li></ul></li><li><p>HttpSessionActivationListener </p></li><li><ul><li>监听session对象的钝化和活化的。</li></ul></li><li><ul><li>钝化：session对象从内存存储到硬盘文件。</li></ul></li><li><ul><li>活化：从硬盘文件把session恢复到内存。</li></ul></li></ul><p>实现一个监听器的步骤：以ServletContextListener接口，并且实现其中的方法</p><ul><li><p>第一步：编写一个类实现ServletContextListener接口，并且实现里面的方法</p><ul><li>&#96;&#96;&#96;java<br>void contextInitialized(ServletContextEvent event)<br>void contextDestoryed(ServletContextEvent event)<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>- 第二步：在web.xml文件中对ServletContextListener进行配置，如下：<br><br>  - ```xml<br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>xgfm737.javaweb.MyServletContextListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>思考一个业务场景：</p><p>编写一个功能，记录该网站实时的在线用户的个数</p><p>我们可以通过服务器端有没有分配session对象，因为一个session对象就代表了一个用户，那个就可以通过HttpSessionListener来实时监测用户个数</p><p>方法：在user类中增加HttpSessionBindingListener 监听器，监听User实体对象是否创建，并且在重写的监听方法中增加aplication存入取出在线人数的变化，然后在list.jsp中通过EL表达式或者是get,&lt;%&#x3D;%&gt;输出在线人数</p></li></ul><h1 id="完结完结咯"><a href="#完结完结咯" class="headerlink" title="完结完结咯"></a><mark>完结完结咯</mark></h1>]]></content>
    
    
    
    <tags>
      
      <tag>JSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2023/06/22/docker/"/>
    <url>/2023/06/22/docker/</url>
    
    <content type="html"><![CDATA[<ol><li><p>开启hyper-v功能</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bat"><span class="hljs-built_in">pushd</span> &quot;%~dp0&quot;<br><br><span class="hljs-built_in">dir</span> /b <span class="hljs-variable">%SystemRoot%</span>\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txt<br><br><span class="hljs-keyword">for</span> /f <span class="hljs-variable">%%i</span> <span class="hljs-keyword">in</span> (&#x27;<span class="hljs-built_in">findstr</span> /i . hyper-v.txt <span class="hljs-number">2</span>^&gt;<span class="hljs-built_in">nul</span>&#x27;) <span class="hljs-keyword">do</span> dism /online /norestart /add-package:&quot;<span class="hljs-variable">%SystemRoot%</span>\servicing\Packages\<span class="hljs-variable">%%i</span>&quot;<br><br><span class="hljs-built_in">del</span> hyper-v.txt<br><br>Dism /online /enable-feature /featurename:Microsoft-Hyper-V -All /LimitAccess /ALL<br><br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure></li><li><p>CMD管理员权限运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">msiexec /package https://wslstorestorage.blob.core.windows.<span class="hljs-built_in">net</span>/wslblob/wsl_update_x64.msi<br></code></pre></td></tr></table></figure></li><li><p>官网下载安装注册docker</p></li><li><p>微软商店下载Linux发行版本</p><p>启动，然后设置账号密码</p></li><li><p>CMD查看运行状态</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wsl -l -v<br></code></pre></td></tr></table></figure></li><li><p>docker -v检测是否安装成功</p></li></ol><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error </span>during connect: this error may indicate that the docker daemon is not running: Get &quot;http://%2F%2F.%2Fpipe%2Fdocker_engine/v1.24/containers/json&quot;: open //./pipe/docker_engine: The system cannot find the file specified.<br><br></code></pre></td></tr></table></figure><p>出现如上错误，先检查程序和docker有没有启动</p><p>7.进入容器！</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment">--进入容器</span><br>docker exec -<span class="hljs-keyword">it</span> 容器<span class="hljs-built_in">id</span> redis-cli<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>拓展</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis笔记</title>
    <link href="/2023/04/20/mybatis%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/04/20/mybatis%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是myBatis"><a href="#什么是myBatis" class="headerlink" title="什么是myBatis"></a>什么是myBatis</h1><p>mybatis是一个优秀的持久层框架，用于简化JDBC（JDBC白学）</p><h2 id="JDBC的缺点"><a href="#JDBC的缺点" class="headerlink" title="JDBC的缺点"></a>JDBC的缺点</h2><p>1.硬编码</p><ul><li>注册驱动和获取链接</li><li>sql语句</li></ul><p>2.操作繁琐</p><ul><li>需要手动封装结果集ResultSet</li><li>preparedstatement手动设置参数</li></ul><p>mybatis免除看几乎所有的JDBC代码以及设置参数和获取结果集的工作</p><h1 id="myBatis快速入门"><a href="#myBatis快速入门" class="headerlink" title="myBatis快速入门"></a>myBatis快速入门</h1><ol><li><p>创建项目</p></li><li><p>新建maven模块</p></li><li><p>在pom.xml中配置mybatis的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x.x<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>x.x.x 为mybatis的版本号</p></li><li><p>因为项目业务需要，同时也要导入mysql的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.48<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置其他所需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 添加slf4j日志api --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 添加logback-classic依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 添加logback-core依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写mybatis核心配置文件–&gt;替换连接信息，解决硬编码</p><p>mybatis-config.xml文件配置的通用案例（其中部分已经替换）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--数据库连接信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1234&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--加载sql的映射文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;UserMapper.xml&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--sql的映射文件的取名规则为xxMapper.xml--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建sql的映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.xgfm.pojo.User&quot;</span>&gt;</span><br>        select * from tb_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建对应的pojo文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String addr;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAddr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> addr;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddr</span><span class="hljs-params">(String addr)</span> &#123;<br>        <span class="hljs-built_in">this</span>.addr = addr;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Tb_user&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, addr=&#x27;&quot;</span> + addr + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>创建mian方法来执行mybatis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm;<br><br><span class="hljs-keyword">import</span> com.xgfm.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//加载mybatis核心配置文件，获取SqlSessionFactory</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br><br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        SqlSession sqlSession=sqlSessionFactory.openSession();<br><br>        <span class="hljs-comment">//执行sql语句</span><br>        List&lt;User&gt; users = sqlSession.selectList(<span class="hljs-string">&quot;test.selectAll&quot;</span>);<br>        System.out.println(users);<br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h1><p>在上述代码中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//执行sql语句</span><br>List&lt;User&gt; users=sqlSession.selectList(<span class="hljs-string">&quot;test.selectAll&quot;</span>);<br></code></pre></td></tr></table></figure><p> 依旧存在硬编码的问题</p><p>为了解决这个问题，便使用mapper进行代理开发</p><p>使用Mapper代理开发的步骤</p><ol><li><p>定义与SQL映射文件同名的Mapper接口，并且将Mapper接口和SQL映射文件放置在同一目录下</p></li><li><p>设置SQL映射文件的namespace属性为Mapper接口全限定名</p></li><li><p>在Mapper接口中定义方法，方法名就是SQL映射文件sql语句中的id，并保持参数类型和返回值类型一致</p></li><li><p>进行编码</p><ul><li><p>通过SqlSession的getMapper方法获取Mapper接口的代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br></code></pre></td></tr></table></figure></li><li><p>调用代理对象中的对应方法完成sql的执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; users=userMapper.selectAll();<br></code></pre></td></tr></table></figure></li></ul></li></ol><p>完成！！</p><p>附MybatisDemo2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm;<br><br><span class="hljs-keyword">import</span> com.xgfm.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.xgfm.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//加载mybatis核心配置文件，获取SqlSessionFactory</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br><br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        SqlSession sqlSession=sqlSessionFactory.openSession();<br><br>        <span class="hljs-comment">//执行sql语句</span><br><span class="hljs-comment">//        List&lt;User&gt; users = sqlSession.selectList(&quot;com.xgfm.mapper.selectAll&quot;);</span><br>        <span class="hljs-comment">//3.1 获取UserMapper接口的代理对象</span><br>        <span class="hljs-comment">//代理对象的</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        List&lt;User&gt; users=userMapper.selectAll();<br><br>        System.out.println(users);<br>        <span class="hljs-comment">//释放资源</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.mapper;<br><br><span class="hljs-keyword">import</span> com.xgfm.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>UserMapper.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.xgfm.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.xgfm.pojo.User&quot;</span>&gt;</span><br>        select * from tb_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在mybatis-config.xml文件中<mappers>标签中有时候有很多很多mapper需要加载，可以使用package进行扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--加载sql的映射文件--&gt;</span><span class="hljs-comment">&lt;!--sql的映射文件的取名规则为xxMapper.xml--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/xgfm/mapper/UserMapper.xml&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--使用package进行Mapper的代理开发--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.xgfm.mapper&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>可以对比两种加载映射文件的方法</p><ul><li>mapper标签是一个一个xml进行加载，而package是一整个包进行扫描读取然后进行加载</li></ul><h1 id="MyBatis的核心配置文件"><a href="#MyBatis的核心配置文件" class="headerlink" title="MyBatis的核心配置文件"></a>MyBatis的核心配置文件</h1><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息</p><ul><li><h3 id="environments（环境配置）"><a href="#environments（环境配置）" class="headerlink" title="environments（环境配置）"></a>environments（环境配置）</h3><ul><li>在其中可以配置多个数据库，动态的切换数据源</li></ul></li><li><p>配置数据库连接环境信息，可以配置多个environment，通过default属性切换不同的environment</p><ul><li>transactionManager是事务管理标签，type一般是JDBC，基本上不需要修改</li><li>dataSource数据库连接池，一般是POOLED连接池使用</li><li>dataSource中间配置的是property，是数据源配置的基本参数</li></ul></li><li><h3 id="typeAliases（类型别名配置）"><a href="#typeAliases（类型别名配置）" class="headerlink" title="typeAliases（类型别名配置）"></a>typeAliases（类型别名配置）</h3><ul><li><p>可以为java类型设置一个缩写的名字，仅仅用于XML配置，意在降低冗余的全限定类名书写</p></li><li><p>例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.xgfm.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在mybatis-config.xml文件中配置后，在各个mapper文件中的com.xgfm.pojo.xxx都可以用xxx代替，并且这个xxx是不区分大小写的</p><p>例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from tb_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <br>    <br><span class="hljs-comment">&lt;!--修改前的xml是这样的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.xgfm.pojo.User&quot;</span>&gt;</span><br>        select * from tb_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><p>mybatis-config.xml文件的配置是有约束的</p><p>其中标签的顺序一定要按照这样的顺序</p><ul><li>configuration（配置）<ul><li>properties（属性）</li><li>settings（设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境配置）<ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ul></li></ul><p>配置文档的顺序必须严格按照这个顺序否则将会报错</p><h1 id="增删改查练习（练学）"><a href="#增删改查练习（练学）" class="headerlink" title="增删改查练习（练学）"></a>增删改查练习（练学）</h1><ul><li><p>准备环境</p><ol><li><p>数据库表tb_brand</p></li><li><p>实体类Brand</p></li><li><p>测试用例</p></li><li><p>安装MyBatisX插件</p><p>myBatisX是为了效率而生的</p></li></ol></li></ul><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ul><li><p>练习-查询所有数据</p><ol><li>编写接口方法</li><li>结果：List<Brand></li><li>编写SQL语句</li><li>执行方法，测试</li></ol></li><li><p>查询所有数据时候会发现输出以下数据</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Brand&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">brandName</span>=<span class="hljs-string">&#x27;null&#x27;</span>, <span class="hljs-attribute">companyName</span>=<span class="hljs-string">&#x27;null&#x27;</span>, <span class="hljs-attribute">ordered</span>=5, <span class="hljs-attribute">description</span>=<span class="hljs-string">&#x27;好吃不上火&#x27;</span>, <span class="hljs-attribute">status</span>=0&#125;<br></code></pre></td></tr></table></figure><p>会发现companyName，brandName输出的是null</p><p><mark>取别名</mark></p><p>数据库表的字段名称和实体类属性名称不一致，不能自动封装，这时候就要在mapper.xml文件改写sql语句，给查询的字段取别名</p><ul><li>缺点：很不方便</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.xgfm.pojo.Brand&quot;</span>&gt;</span><br>        select id, brand_name as brandName , company_name as companyName,ordered,description,status<br>        from tb_brand;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在查询中就可以找到这些数据了</p><p>但是如果以后要用很多查询的时候每次都要起别名是很麻烦的</p><p><mark>sql片段</mark></p><p>可以在外面定义Sql片段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;brand_column&quot;</span>&gt;</span><br>        id, brand_name as brandName , company_name as companyName,ordered,description,status<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;brand&quot;</span>&gt;</span><br>        select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;brand_column&quot;</span>/&gt;</span><br>        from tb_brand;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是这样写，也不灵活</p><p><mark>使用resultMap</mark></p><ol><li>resultMap定义resultMap</li><li>在select标签使用resultMap属性替换resultType属性（resultType的原来的type在resultMap中的type字段好像是一致的）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;brand&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">id:完成主键字段的映射</span><br><span class="hljs-comment">   column：表的列名</span><br><span class="hljs-comment">   property:实体类的属性名</span><br><span class="hljs-comment">result：完成一般字段的映射</span><br><span class="hljs-comment">   column：表的列名</span><br><span class="hljs-comment">   property:实体类的属性名</span><br><span class="hljs-comment">--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;brand_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;brandName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;company_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;companyName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>        select *<br>        from tb_brand;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样代替更加灵活，方便更改</p></li><li><p>练习-查询-查看详情</p><ol><li>编写接口方法<ul><li>参数：id</li><li>结果：Brand</li></ul></li><li>编写SQL语句</li><li>执行方法，进行测试</li></ol></li><li><p>参数占位符：</p><ul><li><p>#{}</p><p>会将其替换为？  为了防止SQL注入进行使用</p></li><li><p>${}</p><p>直接拼SQL，会存在SQL注入问题</p></li></ul><p>所以参数传递的时候都使用#{}</p><p>而${}一般使用在表名或者列名不固定的情况，但也并不是很常用</p></li><li><p>参数类型设置：parameterType，大多时候可以省略</p></li><li><p>特殊字符的处理：</p><p>因为sql是写在mapper.xml文件中的，如果在sql语句中使用&lt;等类似的有占用情况的特殊字符，会报错，这时候有以下几种解决方法：</p><ol><li><p>转义字符</p><p>网上搜索对应的转义字符结果即可</p></li><li><p>CDATA区</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;![CDATA[<br>        <br>        ]]&gt;<br></code></pre></td></tr></table></figure><p>直接输入特殊字符即可</p></li></ol></li><li><p>查询-多条件的查询</p><ol><li>编写接口方法<ul><li>参数：所有的查询条件</li><li>结果：List<Brand></li></ul></li><li>编写SQL语句</li><li>执行方法，进行测试</li></ol><ul><li>思考SQL语句写法</li><li>参数传输</li></ul></li><li><p>多个查询条件进行参数传递</p><ol><li><p>散装参数传递</p></li><li><p>对象参数传递</p><p>对象的属性名称要和参数占位符名称一致，否则无法封装</p></li><li><p>map集合参数传递</p><p>map集合中的键的名称要和参数占位符名称一致，否则无法封装</p></li></ol></li></ul><h2 id="动态条件查询（动态SQL）"><a href="#动态条件查询（动态SQL）" class="headerlink" title="动态条件查询（动态SQL）"></a>动态条件查询（动态SQL）</h2><p>  Mybatis对动态SQL有很强大的支撑：</p><ul><li><p>if</p><p>多用于多条件的查询</p><p>if：条件判断</p><p>test：逻辑表达式</p><p>if标签中的逻辑表达式的&amp;&amp;要用and来进行代替，非空字符串用！&#x3D;’’</p><p>逻辑表达式的字符用逻辑表达式中的数据</p><ul><li>可能会出现where后直接跟上and，然后出现sql语法错误的问题，这时候可以使用<where>标签，或者在where后加入恒等式让所有条件格式一致</li><li>建议使用where标签，更加高效合理</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByCondition&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>        select * from tb_brand<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status!= null&quot;</span>&gt;</span><br>                status= #&#123;status&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;companyName != null&quot;</span>&gt;</span><br>                and company_name like #&#123;companyName&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brandName!= null&quot;</span>&gt;</span><br>                and brand_name like #&#123;brandName&#125;;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>choose(when,otherwise)</p><p>从多个条件中选择其一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByConditionSingle&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br>    select * from tb_brand<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span> <span class="hljs-comment">&lt;!--相当于switch--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status!= null&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--相当于 case--&gt;</span><br>                status =#&#123;status&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;companyName != null and companyName != &#x27;&#x27;&quot;</span>&gt;</span><br>                company_name like #&#123;companyName&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span><br>                brand_name like #&#123;brandName&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--            &lt;otherwise&gt;--&gt;</span><span class="hljs-comment">&lt;!--相当于default--&gt;</span><br>            <span class="hljs-comment">&lt;!--                1=1--&gt;</span><br>            <span class="hljs-comment">&lt;!--            &lt;/otherwise&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>trim(where,set)</p></li><li><p>foreach</p></li></ul><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><ol><li>编写接口方法：Mapper接口<ul><li>参数：除了id之外的所有数据，为了避免id主键重复</li><li>结果：void（通过是否出现异常确认是否成功）</li></ul></li><li>编写SQL语句：SQL映射文件</li></ol><p>mybatis会自动将autocommit设置为false，导致需要手动提交事务</p><p>如果需要自动提交事务，可以在获取sqlSession对象的时候设置参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SqlSession sqlSession=sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h2 id="添加-主键返回"><a href="#添加-主键返回" class="headerlink" title="添加-主键返回"></a>添加-主键返回</h2><p>意思是在数据添加成功后，需要获取插入数据库数据 的主键的值</p><ul><li>比如：添加订单和订单项</li></ul><p>如果没有设置过主键返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">brandMapper.add(brand);<br>       Integer id=brand.getId();<br>       System.out.println(id);<br></code></pre></td></tr></table></figure><p>运行这段代码后，id的值是null，因为id是mysql自增生成的，并没有setId放入brand实体类当中</p><p>这时候就要设置mapper中的insert代码的 useGeneratedKeys和keyProperty属性</p><p>添加   useGeneratedKeys&#x3D;”true” keyProperty&#x3D;”id”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into tb_brand (brand_name , company_name ,ordered,description , status)<br>        values (#&#123;brandName&#125;,#&#123;companyName&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样之后再运行sout(id);就会成功输出实际的id编号了</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>修改全部字段</p><ol><li><p>编写Mapper接口方法</p><p>参数：所有数据</p><p>结果：void</p><p>通过是否出现异常判断是否执行</p></li><li><p>编写SQL语句：SQL映射文件</p></li><li><p>执行方法，测试</p></li></ol><p>要点与前面一致，根据业务逻辑编写SQL语句，Mapper代理运行SQL然后提交事务</p><h2 id="修改动态字段"><a href="#修改动态字段" class="headerlink" title="修改动态字段"></a>修改动态字段</h2><p>动态SQL进行修改语句</p><p>与动态条件查询类似，可以进行类比</p><p>不再赘述</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除一个</p><ol><li><p>编写Mapper接口方法</p><p>参数：id</p><p>结果：void</p></li><li><p>编写SQL语句：SQL映射文件</p></li><li><p>执行方法，测试</p></li></ol><h2 id="批量删除数据"><a href="#批量删除数据" class="headerlink" title="批量删除数据"></a>批量删除数据</h2><p>因为批量删除需要的时候前端传输过来的一般多个数据，所以这时候获取的参数大概率是id数组</p><ol><li><p>编写Mapper接口</p><p>参数：id数组</p><p>结果：void</p></li><li><p>编写SQL语句：SQL映射文件</p></li><li><p>执行方法，测试</p></li></ol><p>批量删除数据和删除单条数据最大的区别在于SQL是动态的，因为批量删除数据时删除数据的数量是不确定的，在where id in (?,?,?) 这样的格式下面，？占位符 的数量是无法确定的，所有要使用动态SQL语句</p><p><mark>mybatis会将传入的数组封装成Map集合</mark></p><ul><li><p>默认：array &#x3D; 数组的key名称</p></li><li><p>使用@Param注解改变map集合的默认key的名称，比如传入参数的时候使用</p><p>(@Param(“ids”)int[] ids)</p></li></ul><p>例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByIds&quot;</span>&gt;</span><br>        delete from tb_brand<br>        where<br>        id in (<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>        );<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">sqlSession.setAutoCommit(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">//false表示关闭自动提交，true为自动提交</span><br>sqlSession.commit;<br><span class="hljs-comment">//提交事务</span><br>sqlSession.rollback();<br><span class="hljs-comment">//关闭事务</span><br></code></pre></td></tr></table></figure><h1 id="MyBatis参数传递"><a href="#MyBatis参数传递" class="headerlink" title="MyBatis参数传递"></a>MyBatis参数传递</h1><p>MyBatis接口方法中可以接收各种各样的参数，MyBatis底层对于这些参数进行不同的封装处理</p><p>单个参数类型：</p><ol><li><p>POJO类型：直接使用类型，属性名和参数占位符一致</p></li><li><p>Map集合：直接使用类型，键名和参数占位符一致</p></li><li><p>Collection：封装为Map集合</p><p>map.put(“arg0”,collection集合);</p><p>map.put(“collection”,collection集合);</p></li><li><p>List：封装为Map集合</p><p>map.put(“arg0”,list集合);</p><p>map.put(“collection”,list集合);</p><p>map.put(“list”,list集合);</p></li><li><p>Array：封装为Map集合</p><p>map.put(“arg0”,数组);</p><p>map.put(“array”,数组);</p></li><li><p>其他类型：可以直接使用，因为会直接调用这个参数放入到参数占位符的地方</p></li></ol><p>多个参数类型：</p><p>封装成Map集合</p><p>map.put(“arg0”,参数值1)</p><p>map.put(“Param1”,参数值1)</p><p>map.put(“arg1”,参数值2)</p><p>map.put(“Param2”,参数值2)</p><p>如果使用@Param注解，来替换argX的键名</p><p><mark>不要用默认的名称，使用@Param注解修改默认的键名，并且使用修改后的名称获取值，这样代码的可阅读性会更加高</mark></p><h1 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h1><p>注解可以简化一些简单的SQL语句，但是复杂的SQL语句依旧是要用xml进行配置，不然会导致SQL语句从复杂变成混乱</p><p>可以直接在Mapper接口中这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from tb_user where id = #&#123;id&#125;&quot;)</span><br>    User <span class="hljs-title function_">selectById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><p>这样可以直接代替在xml文件中写select标签</p><p>但是为了防止出现驼峰命名和_命名导致出现null的问题</p><p>需要在mybatis-config.xml文件配置以下设置，开启驼峰命名识别</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h1><p>刚刚做综合练习</p><p>顺便附上我的servlet和jsp的maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/jsp-api --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AJAX</title>
    <link href="/2023/03/10/AJAX/"/>
    <url>/2023/03/10/AJAX/</url>
    
    <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p><mark>异步</mark>的javaScript和XML</p><p>全程：Asynchronous Javascript And xml</p><p>可以做到前后端分离</p><h6 id="AJAX的作用"><a href="#AJAX的作用" class="headerlink" title="AJAX的作用"></a>AJAX的作用</h6><ol><li><p>与服务器进行数据交换：通过AJAX可以给服务器发送请求，并且获取服务端响应的数据</p><p>使用了AJAX和服务器进行通信，就可以使用HTML+AJAX来替换JSP页面</p></li><li><p>异步交互：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术</p><p>如：搜索时的联想功能，用户名实时校验是否可用</p></li></ol><h1 id="AJAX的快速入门"><a href="#AJAX的快速入门" class="headerlink" title="AJAX的快速入门"></a>AJAX的快速入门</h1><p>编写AjaxServlet</p><p>编写ajax的html网页</p><ol><li><p>创建核心对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhttp;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>)&#123;<br>        xhttp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//code for IE6,IE5</span><br>        xhttp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">xhttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;URL&quot;</span>);<br>    xhttp.<span class="hljs-title function_">send</span>();<br></code></pre></td></tr></table></figure></li><li><p>获取相应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">xhttp.<span class="hljs-property">onreadystatechange</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span>==<span class="hljs-number">4</span>&amp;&amp;<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span>== <span class="hljs-number">200</span>)&#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="全局刷新和局部刷新"><a href="#全局刷新和局部刷新" class="headerlink" title="全局刷新和局部刷新"></a>全局刷新和局部刷新</h1><p>全局刷新：整个浏览器被新的数据覆盖，在网络中传输大量的数据，浏览器需要加载，渲染页面</p><p>局部刷新：在浏览器的内部，发起请求，获取数据，改变页面中的部分内容，其余的页面无需加载和渲染，网络中数据传输量少，给用户的体验好</p><p>ajax就是用来做局部刷新的</p><p>局部刷新使用的核心对象是异步对象，使用javascript语法创建和使用XMLHttpRequest对象</p><h1 id="AJAX异步对象的使用"><a href="#AJAX异步对象的使用" class="headerlink" title="AJAX异步对象的使用"></a>AJAX异步对象的使用</h1><ol><li><p>创建异步对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xmlHttp =<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br></code></pre></td></tr></table></figure></li><li><p>给异步对象绑定事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">button.<span class="hljs-property">onclick</span> =<span class="hljs-title function_">fun1</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;按钮被点击了&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//该方法是xmlhttp获取数据时候都会启动的方法</span><br>xmlHttp.<span class="hljs-property">onreadystatechange</span> =<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//处理状态的变化</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="onreadystatechange事件"><a href="#onreadystatechange事件" class="headerlink" title="onreadystatechange事件"></a>onreadystatechange事件</h1><p>当异步对象发起请求，获取了数据都会触发这个事件，这个事件需要指定一个函数，在函数中处理状态的变化</p><p>每当状态发生改变的时候都会调用一次这个函数</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">xmlHttp.onreadystatechange =<span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//处理状态的变化</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="readyState属性"><a href="#readyState属性" class="headerlink" title="readyState属性"></a>readyState属性</h1><p>存储XMLHttpRequest的状态，从0到4变化</p><p>0：创建异步对象时，new XMLHttpRequest();</p><p>1：初始异步请求对象，xmlHttp.open();</p><p>2：发送请求，xmlHttp.send();</p><p>3：从服务器端获取了数据，此时为3，3是异步对象的内部使用，表示获取了原始的数据</p><p>4：异步对象把接收的数据处理完成后，此时开发人员在4的时候处理数据，在4的时候，更新当前页面，局部刷新数据，更新当前页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(xmlHttp.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span> &amp;&amp; xmlHttp。status == <span class="hljs-number">200</span>)&#123;<br>    <span class="hljs-comment">//可以处理服务器端的数据，更新页面</span><br>&#125;<br></code></pre></td></tr></table></figure><p>异步对象的status属性表示网络请求的状况，200表示网络请求是成功的</p><h1 id="初始异步请求对象"><a href="#初始异步请求对象" class="headerlink" title="初始异步请求对象"></a>初始异步请求对象</h1><p>异步的方法open();</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">xmlHttp.<span class="hljs-title function_">open</span>(请求方式get|post,<span class="hljs-string">&quot;服务器端的访问地址&quot;</span>，同步(<span class="hljs-literal">false</span>)|异步(<span class="hljs-literal">true</span>));<br><br><span class="hljs-comment">//例如</span><br>xmlHttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;loginServlet?name=zs&quot;</span>,<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//异步默认为true可以省略</span><br></code></pre></td></tr></table></figure><h1 id="使用异步对象发送请求"><a href="#使用异步对象发送请求" class="headerlink" title="使用异步对象发送请求"></a>使用异步对象发送请求</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xmlHttp.<span class="hljs-title function_">send</span>()<br></code></pre></td></tr></table></figure><p>获取服务器端返回的数据，使用异步对象的属性：responseText</p><p>使用例子：xmlHttp.responseText</p><h1 id="全局刷新计算BMI（案例）"><a href="#全局刷新计算BMI（案例）" class="headerlink" title="全局刷新计算BMI（案例）"></a>全局刷新计算BMI（案例）</h1><p>使用servlet和转发完成</p><h1 id="局部刷新计算BMI（案例）"><a href="#局部刷新计算BMI（案例）" class="headerlink" title="局部刷新计算BMI（案例）"></a>局部刷新计算BMI（案例）</h1><ol><li>新建JSP，使用XMLHttpRequest异步对象<ul><li>创建</li><li>绑定事件</li><li>初始请求</li><li>发送请求</li></ul></li><li>创建服务器的servlet，接受并处理数据，把数据输出给异步对象</li></ol><p>js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">doAjax</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-comment">//创建异步对象</span><br>            <span class="hljs-keyword">var</span> xmlHttp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>            <span class="hljs-comment">//绑定事件</span><br>            xmlHttp.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-comment">//处理服务器返回的数据，更新当前页面</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span>==<span class="hljs-number">4</span>&amp;&amp;<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span>== <span class="hljs-number">200</span>)&#123;<br>                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;word&quot;</span>).<span class="hljs-property">innerText</span>=<span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>;<br>                &#125;<br>            &#125;;<br>            <span class="hljs-keyword">var</span> name=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-property">value</span>;<br>            <span class="hljs-keyword">var</span> w=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;w&quot;</span>).<span class="hljs-property">value</span>;<br>            <span class="hljs-keyword">var</span> h=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;h&quot;</span>).<span class="hljs-property">value</span>;<br>            <span class="hljs-comment">//初始请求数据</span><br>            xmlHttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;http://localhost:8080//ajax/bmiAjax?name=&quot;</span>+name+<span class="hljs-string">&quot;&amp;&amp;w=&quot;</span>+w+<span class="hljs-string">&quot;&amp;&amp;h=&quot;</span>+h);<br>            <span class="hljs-comment">//发送请求</span><br>            xmlHttp.<span class="hljs-title function_">send</span>();<br>        &#125;<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">    姓名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    体重：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;w&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;w&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    身高：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;h&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;doAjax()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>等待数据加载<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xgfm.ajax;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-meta">@WebServlet(&quot;/bmiAjax&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BmiAjaxServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        String w=request.getParameter(<span class="hljs-string">&quot;w&quot;</span>);<br>        String h=request.getParameter(<span class="hljs-string">&quot;h&quot;</span>);<br>        String name=request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br><br>            <span class="hljs-type">double</span> weight=Double.valueOf(w);<br>            <span class="hljs-type">double</span> high=Double.valueOf(h);<br><br>            <span class="hljs-type">double</span> bmi=weight/(high*high);<br>            String msg;<br>            <span class="hljs-keyword">if</span> (bmi&lt;=<span class="hljs-number">18.5</span>)&#123;<br>                msg=<span class="hljs-string">&quot;你他妈的是不是细狗啊&quot;</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bmi&gt;<span class="hljs-number">18.5</span>&amp;&amp;bmi&lt;=<span class="hljs-number">23.9</span>)&#123;<br>                msg=<span class="hljs-string">&quot;你他妈的好像有点正常诶&quot;</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bmi&gt;<span class="hljs-number">24</span> &amp;&amp; bmi &lt;=<span class="hljs-number">27</span>)&#123;<br>                msg=<span class="hljs-string">&quot;你他妈的一天天吃多少东西啊&quot;</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                msg=<span class="hljs-string">&quot;不是，哥们一天天的光顾着吃了是吧&quot;</span>;<br>            &#125;<br><br>            System.out.println(msg);<br>            msg=<span class="hljs-string">&quot;您好，您的bmi为&quot;</span>+bmi+<span class="hljs-string">&quot;这边的想法是&quot;</span>+msg;<br>            request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,msg);<br>            response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        PrintWriter pw=response.getWriter();<br>        pw.println(msg);<br>        pw.close();<br>    &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h1 id="根据省份id查询省份信息（案例）"><a href="#根据省份id查询省份信息（案例）" class="headerlink" title="根据省份id查询省份信息（案例）"></a>根据省份id查询省份信息（案例）</h1><p>视频中是使用jdbc+jsp实现的，我想用mybatis实现以下</p><h1 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h1><p>使用ajax发送请求—-servlet返回一个json数据格式的字符串</p><h6 id="json分类："><a href="#json分类：" class="headerlink" title="json分类："></a>json分类：</h6><ol><li>json对象，JSONObject，这种对象的格式，名称：值，可以看做是key:value 格式</li><li>json数组，JSONArray，基本格式[{name:”河北”,jiancheng:”冀”,shenghui:”石家庄”}name:”陕西”,jiancheng:”晋”,shenghui:”不知道”}]</li></ol><p>为什么要使用json？</p><ul><li>json格式好理解</li><li>json格式数据在多种语言中，比较容易处理</li><li>json格式数据在他占用的空间下，在网络中传输快，用户体验好</li></ul><h1 id="json如何使用"><a href="#json如何使用" class="headerlink" title="json如何使用"></a>json如何使用</h1><p>处理json的工具库：</p><ul><li>gson(google)</li><li>fastjson(速度快，不是最符合json处理规范)</li><li>jackson（性能好，规范好）</li><li>json-lib(性能差，依赖多)</li></ul><p>我们使用的是jackson</p><p>maven的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--以上【三个jar包紧密依赖】同时存在。--&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.jackson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.jackson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core-asl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Province p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Province</span>();<br>p.setId();<br>p.setName();<br>...存入数据<br>    <br><span class="hljs-comment">//使用jackson把p转为json</span><br>ObjectMapper om=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><span class="hljs-comment">//writeValueAsString :把参数的java对象转为json格式的字符串</span><br>String json=om.writeValueAsString(p);<br>System.out.println(<span class="hljs-string">&quot;转换的json==&quot;</span>+json);<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-comment">//转换的json==&#123;name:&quot;河北&quot;,jiancheng:&quot;冀&quot;,shenghui:&quot;石家庄&quot;&#125;</span><br></code></pre></td></tr></table></figure><p>Servlet对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//给一个默认值，一个空的json，确保有json输入</span><br>String json=<span class="hljs-string">&quot;&#123;&#125;&quot;</span><br><span class="hljs-comment">//获取请求参数，省份的id</span><br>String str=request.getParameter(<span class="hljs-string">&quot;proid&quot;</span>);<br><span class="hljs-comment">//判断proid有值时，调用dao查询数据</span><br><span class="hljs-keyword">if</span>(str!=<span class="hljs-literal">null</span>&amp;&amp; str.trim().length()&gt;<span class="hljs-number">0</span>)&#123;<br>    ProvinceDao dao=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProvinceDao</span>();<br>    Province p=dao.queryProviceById(Integer.valueOf(Str));<br><span class="hljs-comment">//需要用jackson把Provice对象转为json</span><br>    ObjectMapper om=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    json=om.writeValueAsString(p);<br>    <br>    <span class="hljs-comment">//把获取的数据，通过网络传给AJAX的异步对象，响应数据</span><br>    response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>    PrintWriter pw=response.getWriter();<br>    pw.println(json);<br>    <span class="hljs-comment">//输出数据，赋值给ajax中的responseText</span><br>&#125;<br></code></pre></td></tr></table></figure><p>html中的js语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> date=xmlHttp.<span class="hljs-property">responseText</span>;<br><span class="hljs-comment">//eval是执行括号中的代码，将json字符串转为json对象</span><br><span class="hljs-keyword">var</span> jsonobj=<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;(&quot;</span>+data+<span class="hljs-string">&quot;)&quot;</span>);<br><span class="hljs-comment">//更新dom对象</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;proname&quot;</span>).<span class="hljs-property">value</span>=jsonobj.<span class="hljs-property">name</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;projiancheng&quot;</span>).<span class="hljs-property">value</span>=jsonobj.<span class="hljs-property">jiancheng</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;proshenghui&quot;</span>).<span class="hljs-property">value</span>=jsonobj.<span class="hljs-property">shenghui</span>;<br></code></pre></td></tr></table></figure><p>在dom对象更新中有点复杂，可以嵌套函数来简化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">(xmlHttp.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span>&amp;&amp;xmlHttp.<span class="hljs-property">status</span>== <span class="hljs-number">200</span>)&#123;<br><span class="hljs-keyword">var</span> date=xmlHttp.<span class="hljs-property">responseText</span>;<br><span class="hljs-comment">//eval是执行括号中的代码，将json字符串转为json对象</span><br><span class="hljs-keyword">var</span> jsonobj=<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;(&quot;</span>+data+<span class="hljs-string">&quot;)&quot;</span>);<br><br><span class="hljs-title function_">callback</span>(json);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">json</span>)&#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;proname&quot;</span>).<span class="hljs-property">value</span>=jsonobj.<span class="hljs-property">name</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;projiancheng&quot;</span>).<span class="hljs-property">value</span>=jsonobj.<span class="hljs-property">jiancheng</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;proshenghui&quot;</span>).<span class="hljs-property">value</span>=jsonobj.<span class="hljs-property">shenghui</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h1><p>在使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xmlHttp.<span class="hljs-title function_">open</span>(请求方式get|post,<span class="hljs-string">&quot;服务器端的访问地址&quot;</span>，同步(<span class="hljs-literal">false</span>)|异步(<span class="hljs-literal">true</span>));<br></code></pre></td></tr></table></figure><p>使用true是指异步处理请求，使用异步对象发起请求后，不用等待数据处理完毕，就可以执行其他的操作</p><p>再</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xmlHttp.<span class="hljs-title function_">send</span>();<br></code></pre></td></tr></table></figure><p>发送请求</p><p>在这之后执行在send之后的代码等等</p><p>类似多线程执行代码</p><p>同时也可以创建多个异步对象，进行多线程操作</p><p>异步不会影响其他代码的执行，相当于可以同时执行其它请求</p><p>同步请求是比较浪费资源的，在更新数据时候一般都是使用异步对象的</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说还是太过于粗略了，也只是快速入门，做一个了解罢了</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伊苏尔德</title>
    <link href="/2023/02/28/hello-world/"/>
    <url>/2023/02/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>在世之人或苟且求活，或慷慨赴死，到头来，都是无谓，我终将与她相见</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js入门</title>
    <link href="/2023/02/20/js%E5%85%A5%E9%97%A8/"/>
    <url>/2023/02/20/js%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础语法"><a href="#JavaScript基础语法" class="headerlink" title="JavaScript基础语法"></a>JavaScript基础语法</h1><ul><li>书写语法</li><li>输出语句</li><li>变量</li><li>数据类型</li><li>运算符</li><li>流程控制语句</li><li>函数</li></ul><h6 id="书写语法"><a href="#书写语法" class="headerlink" title="书写语法"></a>书写语法</h6><ol><li>区分大小写</li><li>行结尾的分号可有可无</li><li>大括号内包含代码块</li></ol><h6 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>();<span class="hljs-comment">//弹出警告框</span><br><br>doucument.<span class="hljs-title function_">write</span>();<span class="hljs-comment">//写入HTML</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<span class="hljs-comment">//写入控制台</span><br></code></pre></td></tr></table></figure><h6 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h6><ul><li><p>JavaScript中使用var关键字来声明变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> test=<span class="hljs-number">20</span>;<br>test=<span class="hljs-string">&quot;张三&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>JavaScript是一门弱类型的语言，<mark>变量可以存放不同类型的值</mark></p></li><li><p>变量名需要遵循以下的规则：</p><ol><li>组成字符可以是任何字母，数字，下划线或美元符号</li><li>数字不能开头</li><li>建议使用驼峰命名</li></ol></li><li><p>var所声明的变量都是全局变量</p><p>并且变量可以重复定义，效果是直接进行覆盖的</p></li><li><p>let关键字，来定义变量，用法类似var，但定义的变量是局部变量，并且不允许重复定义</p></li><li><p>const关键字，用来声明一个只读的常量，一旦声明，常量的值就不能进行改变了（类似final关键字声明的变量）</p></li></ul><h6 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h6><p>JavaScript的数据类型分为：原始类型和引用类型</p><p>5种原始类型</p><ul><li><p>number：数字</p></li><li><p>string：字符</p></li><li><p>boolean：布尔类型</p></li><li><p>null：对象为空</p></li><li><p>undefined：当变量未初始化时，该变量的默认值是undefined</p><p>使用typeof运算符可以获取数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> age);<br></code></pre></td></tr></table></figure></li></ul><h6 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h6><ul><li><p>一元运算符</p></li><li><p>算术运算符</p></li><li><p>赋值运算符</p></li><li><p>关系运算符（与java相比，多了一个&#x3D;&#x3D;&#x3D;）</p><p>&#x3D;&#x3D;判断方法：</p><ol><li>判断类型是否一致，如果不一样，则进行类型转换</li><li>再去比较</li></ol><p>&#x3D;&#x3D;&#x3D;判断方法：</p><ol><li>判断类型是否一样，不一样直接返回false</li><li>如果一样，比较值是否一样</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age1=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">var</span> age2=<span class="hljs-string">&quot;20&quot;</span>;<br><br><span class="hljs-title function_">alert</span>(ag1==age2);<span class="hljs-comment">//true</span><br><span class="hljs-title function_">alert</span>(ag1===age2);<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure></li><li><p>逻辑运算符</p></li><li><p>三元运算符   条件表达式?true_value : false_value</p></li></ul><h6 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h6><p>其他类型转为number:</p><ul><li><p>string :按照字符串的字面值，转为数字，如果不是数字，则转为NaN。一般使用parseInt进行转换</p></li><li><p>boolean：按照true转为1， false转为0</p></li></ul><p>其他类型转为boolean:</p><ul><li><p>number：0和NaN转为false，其他的数字转为true</p></li><li><p>string：字符串有内容转换为true，没有内容转换为false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//因此可以直接对str进行健壮性判断</span><br><span class="hljs-keyword">if</span>(str)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;true&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>null 转换为false</p></li><li><p>undefined 转换为false</p></li></ul><h6 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h6><ul><li>if</li><li>switch</li><li>for</li><li>while</li><li>do…while</li></ul><h6 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h6><p>js中的函数是通过function进行定义的，语法为</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">function</span> <span class="hljs-title function_">functionName</span>(参数)&#123;<br>执行的代码<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-variable">functionName</span><span class="hljs-operator">=</span> <span class="hljs-title function_">function</span>(参数)&#123;<br>执行的代码<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h1><h6 id="Array数组对象"><a href="#Array数组对象" class="headerlink" title="Array数组对象"></a>Array数组对象</h6><ul><li>定义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(元素列表);<br><br><span class="hljs-keyword">var</span> 变量名=[元素列表]；<br></code></pre></td></tr></table></figure><ul><li>访问</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">arr[index] <span class="hljs-operator">=</span>值<span class="hljs-comment">;</span><br>arr[<span class="hljs-number">0</span>] <span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li><p>特点</p><p>该数组其实相当于java中的集合pro，是变长，变类型的，没有定义长度和放入元素的类型</p></li><li><p>属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//length：数组中的元素个数</span><br><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;<br><span class="hljs-title function_">alert</span>(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//push：添加方法</span><br><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">10</span>);<br><span class="hljs-title function_">alert</span>(arr);<span class="hljs-comment">//输出1，2，3，10</span><br><span class="hljs-comment">//splice:删除元素</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br><span class="hljs-comment">//spice方法的第一个参数是从第几个开始删除数据，第二个参数是从删除几个的参数</span><br><span class="hljs-title function_">alert</span>(arr);<span class="hljs-comment">//输出2,3</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="String字符串对象"><a href="#String字符串对象" class="headerlink" title="String字符串对象"></a>String字符串对象</h6><ul><li>定义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(s);<br><br><span class="hljs-keyword">var</span> 变量名=s;<br></code></pre></td></tr></table></figure><ul><li><p>属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//length属性</span><br><span class="hljs-keyword">var</span> str=<span class="hljs-string">&quot;aaa&quot;</span>;<br><span class="hljs-title function_">alert</span>(str.<span class="hljs-property">length</span>);<br><span class="hljs-comment">//输出3</span><br></code></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//trim()</span><br><span class="hljs-keyword">var</span> str=<span class="hljs-string">&quot;   aaa    &quot;</span>;<br><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>+str+<span class="hljs-number">1</span>);<br><span class="hljs-comment">//输出1   aaa    1</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>+str.<span class="hljs-title function_">trim</span>()+<span class="hljs-number">1</span>);<br><span class="hljs-comment">//输出1aaa1</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h6><ul><li><p>自定义格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 对象名称=&#123;<br>属性名称<span class="hljs-number">1</span>:属性值<span class="hljs-number">1</span>,<br>属性名称<span class="hljs-number">2</span>:属性值<span class="hljs-number">2</span>,<br>.......<br>函数名称:<span class="hljs-keyword">function</span>(<span class="hljs-params">形参列表</span>)&#123;<br>方法代码<br>&#125;<br>.....<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>举例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person =&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">23</span>,<br><span class="hljs-attr">eat</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(干饭！！);<br>&#125;<br>&#125;<br><br><span class="hljs-title function_">alert</span>(person.<span class="hljs-property">name</span>);<br><span class="hljs-comment">//输出zhangsan</span><br><span class="hljs-title function_">alert</span>(person.<span class="hljs-property">age</span>);<br><span class="hljs-comment">//输出23</span><br>perspm.<span class="hljs-title function_">eat</span>();<br><span class="hljs-comment">//输出干饭！！</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="BOM对象-浏览器对象模型"><a href="#BOM对象-浏览器对象模型" class="headerlink" title="BOM对象 浏览器对象模型"></a>BOM对象 浏览器对象模型</h1><p>BOM对象全称 Browser Object Model</p><p>JavaScript将浏览器的各个组成部分封装为对象</p><p>组成：</p><ul><li>Window：浏览器对象</li><li>Navigator：浏览器对象</li><li>Screen：屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ul><h6 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h6><p>直接使用window，并且其中的window.可以省略</p><p>属性：</p><p>可以获取其他四个对象</p><p>方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>(内容);<br><span class="hljs-comment">//警告框</span><br><span class="hljs-title function_">confirm</span>(内容);<br><span class="hljs-comment">//对话框</span><br><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;,毫秒值);<br><span class="hljs-comment">//重复执行的定时器</span><br><span class="hljs-title function_">setTimout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;,毫秒值);<br><span class="hljs-comment">//只执行一次的定时器</span><br></code></pre></td></tr></table></figure><h6 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h6><ul><li><p>获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">history.方法();<br></code></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">back</span>();<br><span class="hljs-comment">//加载history列表的前一个URL</span><br><span class="hljs-title function_">forward</span>();<br><span class="hljs-comment">//加载history列表的下一个URL</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h6><ul><li><p>获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">location.方法();<br></code></pre></td></tr></table></figure></li><li><p>属性</p><p>href  设置或返回完整的URL</p></li></ul><h1 id="DOM对象-文档对象模型"><a href="#DOM对象-文档对象模型" class="headerlink" title="DOM对象  文档对象模型"></a>DOM对象  文档对象模型</h1><p>将标记语言的各个组成部分封装为对象</p><ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul><p>js可以通过DOM来对HTML进行操作</p><ul><li>改变HTML元素的内容</li><li>改变HTML元素的样式</li><li>对HTML DOM事件做出反应</li><li>添加和删除HTML元素</li></ul><p>W3C DOM标准被分为了3个不同的部分：</p><ol><li>核心DOM：针对任何结构化文档的标准模型</li><li>XML DOM：针对XML文档的标准模型</li><li>HTML DOM：针对HTML文档的标准模型</li></ol><h6 id="获取Element元素对象"><a href="#获取Element元素对象" class="headerlink" title="获取Element元素对象"></a>获取Element元素对象</h6><ul><li>Element元素对象</li><li>使用Document对象的方法来获取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">getElementsById<br><span class="hljs-comment">//根据id属性值获取，返回一个Element对象</span><br>getElementsByTagName<br><span class="hljs-comment">//根据标签名称获取，返回Element对象数组</span><br>getElementsByName<br><span class="hljs-comment">//根据name属性值获取，返回Element对象数组</span><br>getElementsByClassName<br><span class="hljs-comment">//根据class属性值获取，返回Element对象数组</span><br></code></pre></td></tr></table></figure><p>其他详细的使用去查看官方文档</p><h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><p>事件是指发生在HTML元素上的“事情” 比如</p><ul><li>按钮被点击</li><li>鼠标移动到元素之上</li><li>按下键盘按键</li></ul><p>事件监听是指js可以在事件被侦测到时执行代码</p><h6 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h6><ol><li><p>通过HTML标签中的事件属性进行绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input type=<span class="hljs-string">&quot;button&quot;</span> onclike=<span class="hljs-string">&#x27;on()&#x27;</span>&gt;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;点击&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过DOM元素属性进行绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input type=<span class="hljs-string">&quot;button&quot;</span> id=<span class="hljs-string">&quot;button&quot;</span>&gt;<br>doucment.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-property">onclick</span>= <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;点击&quot;</span>);<br>&#125;   <br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
